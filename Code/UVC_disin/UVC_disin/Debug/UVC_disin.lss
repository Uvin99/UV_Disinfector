
UVC_disin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800100  00002394  00002428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002394  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004cc  008001ea  008001ea  00002512  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002512  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000027b0  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00053696  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002633  00000000  00000000  000583f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000e87f  00000000  00000000  0005aa29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000f5d4  00000000  00000000  000692a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00013ed5  00000000  00000000  0007887c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000602de  00000000  00000000  0008c751  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000026a8  00000000  00000000  000eca2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 02 	jmp	0x542	; 0x542 <__ctors_end>
       4:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
       8:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
       c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      10:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      14:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      18:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      1c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      20:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      24:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      28:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      2c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      30:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      34:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      38:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      3c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      40:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      44:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      48:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      4c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      50:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      54:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      58:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      5c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      60:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>
      64:	0c 94 be 02 	jmp	0x57c	; 0x57c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	5f 00       	.word	0x005f	; ????
      6a:	04 03       	mulsu	r16, r20
      6c:	04 04       	cpc	r0, r4
      6e:	01 04       	cpc	r0, r1
      70:	05 0a       	sbc	r0, r21
      72:	0d 00       	.word	0x000d	; ????
      74:	fe 09       	sbc	r31, r14
      76:	fe 09       	sbc	r31, r14
      78:	00 01       	movw	r0, r0
      7a:	85 03       	fmuls	r16, r21
      7c:	48 04       	cpc	r4, r8
      7e:	bd 20       	and	r11, r13
      80:	05 00       	.word	0x0005	; ????
      82:	91 02       	muls	r25, r17
      84:	21 07       	cpc	r18, r17
      86:	91 51       	subi	r25, 0x11	; 17
      88:	c2 45       	sbci	r28, 0x52	; 82
      8a:	00 22       	and	r0, r16
      8c:	08 23       	and	r16, r24
      8e:	9f 42       	sbci	r25, 0x2F	; 47
      90:	84 44       	sbci	r24, 0x44	; 68
      92:	00 23       	and	r16, r16
      94:	18 99       	sbic	0x03, 0	; 3
      96:	51 4b       	sbci	r21, 0xB1	; 177
      98:	4c 50       	subi	r20, 0x0C	; 12
      9a:	4c c8       	rjmp	.-3944   	; 0xfffff134 <__eeprom_end+0xff7ef134>
      9c:	81 48       	sbci	r24, 0x81	; 129
      9e:	4c 50       	subi	r20, 0x0C	; 12
      a0:	4c 50       	subi	r20, 0x0C	; 12
      a2:	4c c8       	rjmp	.-3944   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
      a4:	81 48       	sbci	r24, 0x81	; 129
      a6:	4c 50       	subi	r20, 0x0C	; 12
      a8:	4c 08       	sbc	r4, r12
      aa:	00 24       	eor	r0, r0
      ac:	12 99       	sbic	0x02, 2	; 2
      ae:	51 53       	subi	r21, 0x31	; 49
      b0:	d4 45       	sbci	r29, 0x54	; 84
      b2:	4c 8c       	ldd	r4, Y+28	; 0x1c
      b4:	4c d4       	rcall	.+2200   	; 0x94e <__stack+0x4f>
      b6:	55 8c       	ldd	r5, Z+29	; 0x1d
      b8:	4c 8a       	std	Y+20, r4	; 0x14
      ba:	ab 20       	and	r10, r11
      bc:	00 25       	eor	r16, r0
      be:	15 99       	sbic	0x02, 5	; 2
      c0:	51 8b       	std	Z+17, r21	; 0x11
      c2:	50 44       	sbci	r21, 0x40	; 64
      c4:	48 2e       	mov	r4, r24
      c6:	82 24       	eor	r8, r2
      c8:	e2 52       	subi	r30, 0x22	; 34
      ca:	08 45       	sbci	r16, 0x58	; 88
      cc:	84 e4       	ldi	r24, 0x44	; 68
      ce:	22 48       	sbci	r18, 0x82	; 130
      d0:	04 00       	.word	0x0004	; ????
      d2:	26 14       	cp	r2, r6
      d4:	99 51       	subi	r25, 0x19	; 25
      d6:	8b 58       	subi	r24, 0x8B	; 139
      d8:	48 54       	subi	r20, 0x48	; 72
      da:	48 98       	cbi	0x09, 0	; 9
      dc:	58 48       	sbci	r21, 0x88	; 136
      de:	50 9a       	sbi	0x0a, 0	; 10
      e0:	a8 88       	ldd	r10, Y+16	; 0x10
      e2:	54 31       	cpi	r21, 0x14	; 20
      e4:	15 01       	movw	r2, r10
      e6:	27 06       	cpc	r2, r23
      e8:	21 5f       	subi	r18, 0xF1	; 241
      ea:	82 00       	.word	0x0082	; ????
      ec:	28 09       	sbc	r18, r8
      ee:	93 91       	.word	0x9193	; ????
      f0:	4a 44       	sbci	r20, 0x4A	; 74
      f2:	92 dc       	rcall	.-1756   	; 0xfffffa18 <__eeprom_end+0xff7efa18>
      f4:	24 29       	or	r18, r4
      f6:	0a 93       	st	-Y, r16
      f8:	91 42       	sbci	r25, 0x21	; 33
      fa:	4c 92       	st	X, r4
      fc:	5c 24       	eor	r5, r12
      fe:	01 2a       	or	r0, r17
     100:	0a 55       	subi	r16, 0x5A	; 90
     102:	dd 4a       	sbci	r29, 0xAD	; 173
     104:	50 48       	sbci	r21, 0x80	; 128
     106:	45 36       	cpi	r20, 0x65	; 101
     108:	01 2b       	or	r16, r17
     10a:	0b 55       	subi	r16, 0x5B	; 91
     10c:	d5 4a       	sbci	r29, 0xA5	; 165
     10e:	50 48       	sbci	r21, 0x80	; 128
     110:	49 50       	subi	r20, 0x09	; 9
     112:	08 00       	.word	0x0008	; ????
     114:	2c 06       	cpc	r2, r28
     116:	22 71       	andi	r18, 0x12	; 18
     118:	c6 00       	.word	0x00c6	; ????
     11a:	2d 06       	cpc	r2, r29
     11c:	15 d9       	rcall	.-3542   	; 0xfffff348 <__eeprom_end+0xff7ef348>
     11e:	42 01       	movw	r8, r4
     120:	2e 06       	cpc	r2, r30
     122:	22 71       	andi	r18, 0x12	; 18
     124:	02 01       	movw	r0, r4
     126:	2f 09       	sbc	r18, r15
     128:	99 51       	subi	r25, 0x19	; 25
     12a:	63 5c       	subi	r22, 0xC3	; 195
     12c:	fe 10       	cpse	r15, r14
     12e:	00 30       	cpi	r16, 0x00	; 0
     130:	0f 99       	sbic	0x01, 7	; 1
     132:	51 4b       	sbci	r21, 0xB1	; 177
     134:	4d 54       	subi	r20, 0x4D	; 77
     136:	44 9c       	mul	r4, r4
     138:	ee 22       	and	r14, r30
     13a:	a2 62       	ori	r26, 0x22	; 34
     13c:	4a 00       	.word	0x004a	; ????
     13e:	31 09       	sbc	r19, r1
     140:	95 d1       	rcall	.+810    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     142:	4a c8       	rjmp	.-3948   	; 0xfffff1d8 <__eeprom_end+0xff7ef1d8>
     144:	50 3e       	cpi	r21, 0xE0	; 224
     146:	29 32       	cpi	r18, 0x29	; 41
     148:	0e 99       	sbic	0x01, 6	; 1
     14a:	51 c7       	rjmp	.+3746   	; 0xfee <u8g2_ll_hvline_vertical_top_lsb+0x64>
     14c:	45 5c       	subi	r20, 0xC5	; 197
     14e:	60 8a       	std	Z+16, r6	; 0x10
     150:	8b c0       	rjmp	.+278    	; 0x268 <__trampolines_end+0x200>
     152:	84 07       	cpc	r24, r20
     154:	02 33       	cpi	r16, 0x32	; 50
     156:	0f 99       	sbic	0x01, 7	; 1
     158:	51 c7       	rjmp	.+3746   	; 0xffc <u8g2_ll_hvline_vertical_top_lsb+0x72>
     15a:	45 5c       	subi	r20, 0xC5	; 197
     15c:	60 9a       	sbi	0x0c, 0	; 12
     15e:	ca 40       	sbci	r28, 0x0A	; 10
     160:	b9 88       	ldd	r11, Y+17	; 0x11
     162:	0b 00       	.word	0x000b	; ????
     164:	34 0b       	sbc	r19, r20
     166:	99 51       	subi	r25, 0x19	; 25
     168:	43 60       	ori	r20, 0x03	; 3
     16a:	9c ba       	out	0x1c, r9	; 28
     16c:	83 c1       	rjmp	.+774    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
     16e:	1c 35       	cpi	r17, 0x5C	; 92
     170:	0f 99       	sbic	0x01, 7	; 1
     172:	51 c3       	rjmp	.+1698   	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     174:	c1 60       	ori	r28, 0x01	; 1
     176:	c2 83       	std	Z+2, r28	; 0x02
     178:	c8 40       	sbci	r28, 0x08	; 8
     17a:	b9 88       	ldd	r11, Y+17	; 0x11
     17c:	0b 00       	.word	0x000b	; ????
     17e:	36 10       	cpse	r3, r6
     180:	99 51       	subi	r25, 0x19	; 25
     182:	c7 45       	sbci	r28, 0x57	; 87
     184:	9c 60       	ori	r25, 0x0C	; 12
     186:	e0 41       	sbci	r30, 0x10	; 16
     188:	44 9c       	mul	r4, r4
     18a:	ba 88       	ldd	r11, Y+18	; 0x12
     18c:	0b 00       	.word	0x000b	; ????
     18e:	37 0b       	sbc	r19, r23
     190:	99 51       	subi	r25, 0x19	; 25
     192:	c3 81       	ldd	r28, Z+3	; 0x03
     194:	60 5c       	subi	r22, 0xC0	; 192
     196:	0e 33       	cpi	r16, 0x3E	; 62
     198:	02 38       	cpi	r16, 0x82	; 130
     19a:	0f 99       	sbic	0x01, 7	; 1
     19c:	51 c7       	rjmp	.+3746   	; 0x1040 <u8g2_update_dimension_common>
     19e:	45 9c       	mul	r4, r5
     1a0:	ba 88       	ldd	r11, Y+18	; 0x12
     1a2:	8b 38       	cpi	r24, 0x8B	; 139
     1a4:	75 11       	cpse	r23, r5
     1a6:	17 00       	.word	0x0017	; ????
     1a8:	39 10       	cpse	r3, r9
     1aa:	99 51       	subi	r25, 0x19	; 25
     1ac:	c7 45       	sbci	r28, 0x57	; 87
     1ae:	9c ba       	out	0x1c, r9	; 28
     1b0:	88 83       	st	Y, r24
     1b2:	c0 40       	sbci	r28, 0x00	; 0
     1b4:	b9 88       	ldd	r11, Y+17	; 0x11
     1b6:	0b 00       	.word	0x000b	; ????
     1b8:	3a 07       	cpc	r19, r26
     1ba:	62 71       	andi	r22, 0x12	; 18
     1bc:	02 11       	cpse	r16, r2
     1be:	01 3b       	cpi	r16, 0xB1	; 177
     1c0:	08 62       	ori	r16, 0x28	; 40
     1c2:	71 02       	muls	r23, r17
     1c4:	91 44       	sbci	r25, 0x41	; 65
     1c6:	00 3c       	cpi	r16, 0xC0	; 192
     1c8:	08 74       	andi	r16, 0x48	; 72
     1ca:	b1 4e       	sbci	r27, 0xE1	; 225
     1cc:	48 46       	sbci	r20, 0x68	; 104
     1ce:	19 3d       	cpi	r17, 0xD9	; 217
     1d0:	07 44       	sbci	r16, 0x47	; 71
     1d2:	b5 02       	muls	r27, r21
     1d4:	21 01       	movw	r4, r2
     1d6:	3e 09       	sbc	r19, r14
     1d8:	74 b1       	in	r23, 0x04	; 4
     1da:	42 50       	subi	r20, 0x02	; 2
     1dc:	26 d9       	rcall	.-3508   	; 0xfffff42a <__eeprom_end+0xff7ef42a>
     1de:	00 3f       	cpi	r16, 0xF0	; 240
     1e0:	0f 99       	sbic	0x01, 7	; 1
     1e2:	51 c7       	rjmp	.+3746   	; 0x1086 <u8g2_update_dimension_common+0x46>
     1e4:	45 9c       	mul	r4, r5
     1e6:	5c 60       	ori	r21, 0x0C	; 12
     1e8:	10 55       	subi	r17, 0x50	; 80
     1ea:	3c 6c       	ori	r19, 0xCC	; 204
     1ec:	10 00       	.word	0x0010	; ????
     1ee:	40 16       	cp	r4, r16
     1f0:	99 51       	subi	r25, 0x19	; 25
     1f2:	4b 4d       	sbci	r20, 0xDB	; 219
     1f4:	54 44       	sbci	r21, 0x44	; 68
     1f6:	c8 88       	ldd	r12, Y+16	; 0x10
     1f8:	54 84       	ldd	r5, Z+12	; 0x0c
     1fa:	08 85       	ldd	r16, Y+8	; 0x08
     1fc:	44 4c       	sbci	r20, 0xC4	; 196
     1fe:	84 88       	ldd	r8, Z+20	; 0x14
     200:	45 a4       	ldd	r4, Z+45	; 0x2d
     202:	05 00       	.word	0x0005	; ????
     204:	41 14       	cp	r4, r1
     206:	99 51       	subi	r25, 0x19	; 25
     208:	53 5c       	subi	r21, 0xC3	; 195
     20a:	44 58       	subi	r20, 0x84	; 132
     20c:	44 54       	subi	r20, 0x44	; 68
     20e:	4c 50       	subi	r20, 0x0C	; 12
     210:	4d 54       	subi	r20, 0x4D	; 77
     212:	48 54       	subi	r20, 0x48	; 72
     214:	44 9c       	mul	r4, r4
     216:	5c 00       	.word	0x005c	; ????
     218:	42 13       	cpse	r20, r18
     21a:	99 51       	subi	r25, 0x19	; 25
     21c:	c3 49       	sbci	r28, 0x93	; 147
     21e:	58 44       	sbci	r21, 0x48	; 72
     220:	9c 58       	subi	r25, 0x8C	; 140
     222:	c4 49       	sbci	r28, 0x94	; 148
     224:	58 44       	sbci	r21, 0x48	; 72
     226:	9c 58       	subi	r25, 0x8C	; 140
     228:	c4 09       	sbc	r28, r4
     22a:	00 43       	sbci	r16, 0x30	; 48
     22c:	10 99       	sbic	0x02, 0	; 2
     22e:	51 4b       	sbci	r21, 0xB1	; 177
     230:	4d 54       	subi	r20, 0x4D	; 77
     232:	44 9c       	mul	r4, r4
     234:	60 76       	andi	r22, 0x60	; 96
     236:	11 51       	subi	r17, 0x11	; 17
     238:	31 25       	eor	r19, r1
     23a:	00 44       	sbci	r16, 0x40	; 64
     23c:	0d 99       	sbic	0x01, 5	; 1
     23e:	51 c3       	rjmp	.+1698   	; 0x8e2 <u8g2_font_decode_len+0x16>
     240:	49 58       	subi	r20, 0x89	; 137
     242:	44 9c       	mul	r4, r4
     244:	9e 45       	sbci	r25, 0x5E	; 94
     246:	9c 00       	.word	0x009c	; ????
     248:	45 0e       	add	r4, r21
     24a:	99 51       	subi	r25, 0x19	; 25
     24c:	c3 c1       	rjmp	.+902    	; 0x5d4 <u8g2_send_buffer+0x1c>
     24e:	60 c2       	rjmp	.+1216   	; 0x710 <u8g2_read_font_info+0x3a>
     250:	83 88       	ldd	r8, Z+19	; 0x13
     252:	c0 84       	ldd	r12, Z+8	; 0x08
     254:	07 02       	muls	r16, r23
     256:	46 0d       	add	r20, r6
     258:	99 51       	subi	r25, 0x19	; 25
     25a:	c3 c1       	rjmp	.+902    	; 0x5e2 <u8g2_send_buffer+0x2a>
     25c:	60 c2       	rjmp	.+1216   	; 0x71e <u8g2_read_font_info+0x48>
     25e:	83 88       	ldd	r8, Z+19	; 0x13
     260:	c0 0c       	add	r12, r0
     262:	01 47       	sbci	r16, 0x71	; 113
     264:	0f 99       	sbic	0x01, 7	; 1
     266:	51 8b       	std	Z+17, r21	; 0x11
     268:	49 98       	cbi	0x09, 1	; 9
     26a:	60 1a       	sub	r6, r16
     26c:	3b b9       	out	0x0b, r19	; 11
     26e:	88 b0       	in	r8, 0x08	; 8
     270:	90 03       	fmuls	r17, r16
     272:	48 0b       	sbc	r20, r24
     274:	99 51       	subi	r25, 0x19	; 25
     276:	43 9c       	mul	r4, r3
     278:	76 07       	cpc	r23, r22
     27a:	74 da       	rcall	.-2840   	; 0xfffff764 <__eeprom_end+0xff7ef764>
     27c:	05 49       	sbci	r16, 0x95	; 149
     27e:	07 91       	elpm	r16, Z+
     280:	51 c2       	rjmp	.+1186   	; 0x724 <u8g2_read_font_info+0x4e>
     282:	81 00       	.word	0x0081	; ????
     284:	4a 0e       	add	r4, r26
     286:	99 51       	subi	r25, 0x19	; 25
     288:	db 60       	ori	r29, 0x0B	; 11
     28a:	86 72       	andi	r24, 0x26	; 38
     28c:	72 11       	cpse	r23, r2
     28e:	51 31       	cpi	r21, 0x11	; 17
     290:	25 00       	.word	0x0025	; ????
     292:	4b 14       	cp	r4, r11
     294:	99 51       	subi	r25, 0x19	; 25
     296:	43 9c       	mul	r4, r3
     298:	58 44       	sbci	r21, 0x48	; 72
     29a:	54 48       	sbci	r21, 0x84	; 132
     29c:	50 4c       	sbci	r21, 0xC0	; 192
     29e:	51 9a       	sbi	0x0a, 1	; 10
     2a0:	a8 90       	.word	0x90a8	; ????
     2a2:	b0 88       	ldd	r11, Z+16	; 0x10
     2a4:	b8 00       	.word	0x00b8	; ????
     2a6:	4c 09       	sbc	r20, r12
     2a8:	99 51       	subi	r25, 0x19	; 25
     2aa:	43 60       	ori	r20, 0x03	; 3
     2ac:	7e 78       	andi	r23, 0x8E	; 142
     2ae:	20 4d       	sbci	r18, 0xD0	; 208
     2b0:	12 99       	sbic	0x02, 2	; 2
     2b2:	51 43       	sbci	r21, 0x31	; 49
     2b4:	dc d4       	rcall	.+2488   	; 0xc6e <u8g2_DrawGlyph+0x6c>
     2b6:	44 4c       	sbci	r20, 0xC4	; 196
     2b8:	84 48       	sbci	r24, 0x84	; 132
     2ba:	44 88       	ldd	r4, Z+20	; 0x14
     2bc:	4c 8c       	ldd	r4, Y+28	; 0x1c
     2be:	9c 76       	andi	r25, 0x6C	; 108
     2c0:	01 4e       	sbci	r16, 0xE1	; 225
     2c2:	14 99       	sbic	0x02, 4	; 2
     2c4:	51 43       	sbci	r21, 0x31	; 49
     2c6:	dc 98       	cbi	0x1b, 4	; 27
     2c8:	44 94       	.word	0x9444	; ????
     2ca:	48 90       	.word	0x9048	; ????
     2cc:	4c 8c       	ldd	r4, Y+28	; 0x1c
     2ce:	50 88       	ldd	r5, Z+16	; 0x10
     2d0:	54 84       	ldd	r5, Z+12	; 0x0c
     2d2:	d8 5c       	subi	r29, 0xC8	; 200
     2d4:	00 4f       	sbci	r16, 0xF0	; 240
     2d6:	0f 99       	sbic	0x01, 7	; 1
     2d8:	51 4b       	sbci	r21, 0xB1	; 177
     2da:	4d 54       	subi	r20, 0x4D	; 77
     2dc:	44 9c       	mul	r4, r4
     2de:	ee 22       	and	r14, r30
     2e0:	a2 62       	ori	r26, 0x22	; 34
     2e2:	4a 00       	.word	0x004a	; ????
     2e4:	50 0e       	add	r5, r16
     2e6:	99 51       	subi	r25, 0x19	; 25
     2e8:	c3 41       	sbci	r28, 0x13	; 19
     2ea:	44 9c       	mul	r4, r4
     2ec:	ba 03       	fmulsu	r19, r18
     2ee:	89 c0       	rjmp	.+274    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     2f0:	0c 01       	movw	r0, r24
     2f2:	51 19       	sub	r21, r1
     2f4:	aa 6f       	ori	r26, 0xFA	; 250
     2f6:	4b 51       	subi	r20, 0x1B	; 27
     2f8:	54 48       	sbci	r21, 0x84	; 132
     2fa:	5c 44       	sbci	r21, 0x4C	; 76
     2fc:	5c 44       	sbci	r21, 0x4C	; 76
     2fe:	4c 8a       	std	Y+20, r4	; 0x14
     300:	a0 90 88 a8 	lds	r10, 0xA888	; 0x80a888 <__bss_end+0xa1d2>
     304:	88 90       	.word	0x9088	; ????
     306:	a8 a0       	ldd	r10, Y+32	; 0x20
     308:	8a d0       	rcall	.+276    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     30a:	00 52       	subi	r16, 0x20	; 32
     30c:	10 99       	sbic	0x02, 0	; 2
     30e:	51 c3       	rjmp	.+1698   	; 0x9b2 <u8g2_font_decode_glyph+0x24>
     310:	41 44       	sbci	r20, 0x41	; 65
     312:	9c ba       	out	0x1c, r9	; 28
     314:	03 89       	ldd	r16, Z+19	; 0x13
     316:	b0 88       	ldd	r11, Z+16	; 0x10
     318:	38 75       	andi	r19, 0x58	; 88
     31a:	01 53       	subi	r16, 0x31	; 49
     31c:	0f 99       	sbic	0x01, 7	; 1
     31e:	51 c7       	rjmp	.+3746   	; 0x11c2 <u8x8_ascii_next>
     320:	45 9c       	mul	r4, r5
     322:	60 e4       	ldi	r22, 0x40	; 64
     324:	65 a0       	ldd	r6, Z+37	; 0x25
     326:	5c c4       	rjmp	.+2232   	; 0xbe0 <u8g2_font_draw_glyph+0x4>
     328:	05 00       	.word	0x0005	; ????
     32a:	54 0a       	sbc	r5, r20
     32c:	99 51       	subi	r25, 0x19	; 25
     32e:	c3 81       	ldd	r28, Z+3	; 0x03
     330:	50 60       	ori	r21, 0x00	; 0
     332:	7e 04       	cpc	r7, r14
     334:	55 0c       	add	r5, r5
     336:	99 51       	subi	r25, 0x19	; 25
     338:	43 9c       	mul	r4, r3
     33a:	be 8b       	std	Y+22, r27	; 0x16
     33c:	88 8a       	std	Y+16, r8	; 0x10
     33e:	29 01       	movw	r4, r18
     340:	56 15       	cp	r21, r6
     342:	99 51       	subi	r25, 0x19	; 25
     344:	43 9c       	mul	r4, r3
     346:	5c 44       	sbci	r21, 0x4C	; 76
     348:	54 48       	sbci	r21, 0x84	; 132
     34a:	54 4c       	sbci	r21, 0xC4	; 196
     34c:	a2 98       	cbi	0x14, 2	; 20
     34e:	a8 88       	ldd	r10, Y+16	; 0x10
     350:	b0 88       	ldd	r11, Z+16	; 0x10
     352:	b8 20       	and	r11, r8
     354:	00 57       	subi	r16, 0x70	; 112
     356:	17 99       	sbic	0x02, 7	; 2
     358:	51 43       	sbci	r21, 0x31	; 49
     35a:	4c 8c       	ldd	r4, Y+28	; 0x1c
     35c:	4c 8c       	ldd	r4, Y+28	; 0x1c
     35e:	4c 8c       	ldd	r4, Y+28	; 0x1c
     360:	4c 8c       	ldd	r4, Y+28	; 0x1c
     362:	4c 8a       	std	Y+20, r4	; 0x14
     364:	9c 44       	sbci	r25, 0x4C	; 76
     366:	64 12       	cpse	r6, r20
     368:	91 4d       	sbci	r25, 0xD1	; 209
     36a:	12 00       	.word	0x0012	; ????
     36c:	58 13       	cpse	r21, r24
     36e:	99 51       	subi	r25, 0x19	; 25
     370:	43 5c       	subi	r20, 0xC3	; 195
     372:	44 54       	subi	r20, 0x44	; 68
     374:	4c aa       	std	Y+52, r4	; 0x34
     376:	88 b8       	out	0x08, r8	; 8
     378:	14 51       	subi	r17, 0x14	; 20
     37a:	31 a9       	ldd	r19, Z+49	; 0x31
     37c:	22 e2       	ldi	r18, 0x22	; 34
     37e:	02 59       	subi	r16, 0x92	; 146
     380:	0f 99       	sbic	0x01, 7	; 1
     382:	51 43       	sbci	r21, 0x31	; 49
     384:	5c 44       	sbci	r21, 0x4C	; 76
     386:	54 4c       	sbci	r21, 0xC4	; 196
     388:	aa 88       	ldd	r10, Y+18	; 0x12
     38a:	b8 c0       	rjmp	.+368    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     38c:	1c 01       	movw	r2, r24
     38e:	5a 0a       	sbc	r5, r26
     390:	99 51       	subi	r25, 0x19	; 25
     392:	c3 81       	ldd	r28, Z+3	; 0x03
     394:	5c 7e       	andi	r21, 0xEC	; 236
     396:	77 20       	and	r7, r7
     398:	5b 08       	sbc	r5, r11
     39a:	92 71       	andi	r25, 0x12	; 18
     39c:	c2 44       	sbci	r28, 0x42	; 66
     39e:	be 10       	cpse	r11, r14
     3a0:	5c 08       	sbc	r5, r12
     3a2:	99 51       	subi	r25, 0x19	; 25
     3a4:	43 64       	ori	r20, 0x43	; 67
     3a6:	fe 00       	.word	0x00fe	; ????
     3a8:	5d 08       	sbc	r5, r13
     3aa:	92 71       	andi	r25, 0x12	; 18
     3ac:	82 44       	sbci	r24, 0x42	; 66
     3ae:	be 18       	sub	r11, r14
     3b0:	5e 09       	sbc	r21, r14
     3b2:	35 dd       	rcall	.-1430   	; 0xfffffe1e <__eeprom_end+0xff7efe1e>
     3b4:	4a 4c       	sbci	r20, 0xCA	; 202
     3b6:	44 9a       	sbi	0x08, 4	; 8
     3b8:	00 5f       	subi	r16, 0xF0	; 240
     3ba:	07 19       	sub	r16, r7
     3bc:	51 c3       	rjmp	.+1698   	; 0xa60 <u8g2_font_decode_glyph+0xd2>
     3be:	81 00       	.word	0x0081	; ????
     3c0:	60 07       	cpc	r22, r16
     3c2:	34 bd       	out	0x24, r19	; 36
     3c4:	82 50       	subi	r24, 0x02	; 2
     3c6:	02 61       	ori	r16, 0x12	; 18
     3c8:	0d 79       	andi	r16, 0x9D	; 157
     3ca:	51 c7       	rjmp	.+3746   	; 0x126e <u8x8_i2c_data_transfer+0x2c>
     3cc:	65 c4       	rjmp	.+2250   	; 0xc98 <u8g2_draw_string+0x22>
     3ce:	81 9c       	mul	r8, r1
     3d0:	ba 88       	ldd	r11, Y+18	; 0x12
     3d2:	0b 00       	.word	0x000b	; ????
     3d4:	62 0e       	add	r6, r18
     3d6:	99 51       	subi	r25, 0x19	; 25
     3d8:	43 60       	ori	r20, 0x03	; 3
     3da:	e0 41       	sbci	r30, 0x10	; 16
     3dc:	44 9c       	mul	r4, r4
     3de:	ee 0e       	add	r14, r30
     3e0:	24 00       	.word	0x0024	; ????
     3e2:	63 0c       	add	r6, r3
     3e4:	79 51       	subi	r23, 0x19	; 25
     3e6:	c7 45       	sbci	r28, 0x57	; 87
     3e8:	9c 60       	ori	r25, 0x0C	; 12
     3ea:	76 11       	cpse	r23, r6
     3ec:	17 00       	.word	0x0017	; ????
     3ee:	64 0c       	add	r6, r4
     3f0:	99 51       	subi	r25, 0x19	; 25
     3f2:	63 8a       	std	Z+19, r6	; 0x13
     3f4:	03 39       	cpi	r16, 0x93	; 147
     3f6:	dd 45       	sbci	r29, 0x5D	; 93
     3f8:	1c 04       	cpc	r1, r12
     3fa:	65 0e       	add	r6, r21
     3fc:	79 51       	subi	r23, 0x19	; 25
     3fe:	c7 45       	sbci	r28, 0x57	; 87
     400:	9c dc       	rcall	.-1736   	; 0xfffffd3a <__eeprom_end+0xff7efd3a>
     402:	81 44       	sbci	r24, 0x41	; 65
     404:	60 e4       	ldi	r22, 0x40	; 64
     406:	05 00       	.word	0x0005	; ????
     408:	66 0c       	add	r6, r6
     40a:	99 51       	subi	r25, 0x19	; 25
     40c:	cb 45       	sbci	r28, 0x5B	; 91
     40e:	dc 41       	sbci	r29, 0x1C	; 28
     410:	48 60       	ori	r20, 0x08	; 8
     412:	de 01       	movw	r26, r28
     414:	67 0e       	add	r6, r23
     416:	99 4d       	sbci	r25, 0xD9	; 217
     418:	c7 81       	ldd	r28, Z+7	; 0x07
     41a:	9c ee       	ldi	r25, 0xEC	; 236
     41c:	22 0e       	add	r2, r18
     41e:	02 0f       	add	r16, r18
     420:	24 00       	.word	0x0024	; ????
     422:	68 0c       	add	r6, r8
     424:	99 51       	subi	r25, 0x19	; 25
     426:	43 60       	ori	r20, 0x03	; 3
     428:	e0 41       	sbci	r30, 0x10	; 16
     42a:	44 9c       	mul	r4, r4
     42c:	de 05       	cpc	r29, r14
     42e:	69 07       	cpc	r22, r25
     430:	91 51       	subi	r25, 0x11	; 17
     432:	42 c4       	rjmp	.+2180   	; 0xcb8 <u8g2_draw_string+0x42>
     434:	01 6a       	ori	r16, 0xA1	; 161
     436:	0c b9       	out	0x0c, r16	; 12
     438:	4d 63       	ori	r20, 0x3D	; 61
     43a:	3c 48       	sbci	r19, 0x8C	; 140
     43c:	60 be       	out	0x30, r6	; 48
     43e:	8b 38       	cpi	r24, 0x8B	; 139
     440:	01 6b       	ori	r16, 0xB1	; 177
     442:	0f 99       	sbic	0x01, 7	; 1
     444:	51 43       	sbci	r21, 0x31	; 49
     446:	60 3a       	cpi	r22, 0xA0	; 160
     448:	b1 88       	ldd	r11, Z+17	; 0x11
     44a:	93 b0       	in	r9, 0x03	; 3
     44c:	88 38       	cpi	r24, 0x88	; 136
     44e:	75 01       	movw	r14, r10
     450:	6c 08       	sbc	r6, r12
     452:	92 71       	andi	r25, 0x12	; 18
     454:	42 44       	sbci	r20, 0x42	; 66
     456:	7e 12       	cpse	r7, r30
     458:	6d 13       	cpse	r22, r29
     45a:	79 51       	subi	r23, 0x19	; 25
     45c:	03 c5       	rjmp	.+2566   	; 0xe64 <u8g2_DrawHVLine+0x24>
     45e:	44 4c       	sbci	r20, 0xC4	; 196
     460:	8c 4c       	sbci	r24, 0xCC	; 204
     462:	8c 4c       	sbci	r24, 0xCC	; 204
     464:	8c 4c       	sbci	r24, 0xCC	; 204
     466:	8c 4c       	sbci	r24, 0xCC	; 204
     468:	8c 4c       	sbci	r24, 0xCC	; 204
     46a:	02 6e       	ori	r16, 0xE2	; 226
     46c:	0a 79       	andi	r16, 0x9A	; 154
     46e:	51 c3       	rjmp	.+1698   	; 0xb12 <u8g2_font_get_glyph_data+0x18>
     470:	41 44       	sbci	r20, 0x41	; 65
     472:	9c de       	rcall	.-712    	; 0x1ac <__trampolines_end+0x144>
     474:	05 6f       	ori	r16, 0xF5	; 245
     476:	0b 79       	andi	r16, 0x9B	; 155
     478:	51 c7       	rjmp	.+3746   	; 0x131c <u8x8_cad_SendSequence+0x32>
     47a:	45 9c       	mul	r4, r5
     47c:	ee 22       	and	r14, r30
     47e:	2e 00       	.word	0x002e	; ????
     480:	70 0e       	add	r7, r16
     482:	99 4d       	sbci	r25, 0xD9	; 217
     484:	c3 41       	sbci	r28, 0x13	; 19
     486:	44 9c       	mul	r4, r4
     488:	ee 0e       	add	r14, r30
     48a:	24 02       	muls	r18, r20
     48c:	03 01       	movw	r0, r6
     48e:	71 0c       	add	r7, r1
     490:	99 4d       	sbci	r25, 0xD9	; 217
     492:	c7 81       	ldd	r28, Z+7	; 0x07
     494:	9c ee       	ldi	r25, 0xEC	; 236
     496:	22 0e       	add	r2, r18
     498:	02 13       	cpse	r16, r18
     49a:	72 0b       	sbc	r23, r18
     49c:	79 51       	subi	r23, 0x19	; 25
     49e:	c3 41       	sbci	r28, 0x13	; 19
     4a0:	44 9c       	mul	r4, r4
     4a2:	c2 0c       	add	r12, r2
     4a4:	01 73       	andi	r16, 0x31	; 49
     4a6:	0d 79       	andi	r16, 0x9D	; 157
     4a8:	51 c7       	rjmp	.+3746   	; 0x134c <u8x8_cad_SendSequence+0x62>
     4aa:	45 9c       	mul	r4, r5
     4ac:	e4 a5       	ldd	r30, Z+44	; 0x2c
     4ae:	5c c4       	rjmp	.+2232   	; 0xd68 <u8g2_UpdateRefHeight+0x5a>
     4b0:	05 00       	.word	0x0005	; ????
     4b2:	74 0b       	sbc	r23, r20
     4b4:	99 51       	subi	r25, 0x19	; 25
     4b6:	4b 60       	ori	r20, 0x0B	; 11
     4b8:	98 55       	subi	r25, 0x58	; 88
     4ba:	60 2e       	mov	r6, r16
     4bc:	0d 75       	andi	r16, 0x5D	; 93
     4be:	0a 79       	andi	r16, 0x9A	; 154
     4c0:	51 43       	sbci	r21, 0x31	; 49
     4c2:	9c de       	rcall	.-712    	; 0x1fc <__trampolines_end+0x194>
     4c4:	45 1c       	adc	r4, r5
     4c6:	04 76       	andi	r16, 0x64	; 100
     4c8:	0f 79       	andi	r16, 0x9F	; 159
     4ca:	51 43       	sbci	r21, 0x31	; 49
     4cc:	9c ba       	out	0x1c, r9	; 28
     4ce:	88 a8       	ldd	r8, Y+48	; 0x30
     4d0:	98 54       	subi	r25, 0x48	; 72
     4d2:	11 71       	andi	r17, 0x11	; 17
     4d4:	41 00       	.word	0x0041	; ????
     4d6:	77 13       	cpse	r23, r23
     4d8:	79 51       	subi	r23, 0x19	; 25
     4da:	43 4c       	sbci	r20, 0xC3	; 195
     4dc:	8c 4c       	sbci	r24, 0xCC	; 204
     4de:	8c 4c       	sbci	r24, 0xCC	; 204
     4e0:	8a 9c       	mul	r8, r10
     4e2:	44 64       	ori	r20, 0x44	; 68
     4e4:	93 28       	or	r9, r3
     4e6:	26 04       	cpc	r2, r6
     4e8:	00 78       	andi	r16, 0x80	; 128
     4ea:	10 79       	andi	r17, 0x90	; 144
     4ec:	51 43       	sbci	r21, 0x31	; 49
     4ee:	5c 44       	sbci	r21, 0x4C	; 76
     4f0:	54 4c       	sbci	r21, 0xC4	; 196
     4f2:	aa a9       	ldd	r26, Y+50	; 0x32
     4f4:	98 54       	subi	r25, 0x48	; 72
     4f6:	11 71       	andi	r17, 0x11	; 17
     4f8:	01 79       	andi	r16, 0x91	; 145
     4fa:	0d 99       	sbic	0x01, 5	; 1
     4fc:	4d 43       	sbci	r20, 0x3D	; 61
     4fe:	9c de       	rcall	.-712    	; 0x238 <__trampolines_end+0x1d0>
     500:	45 1c       	adc	r4, r5
     502:	04 1e       	adc	r0, r20
     504:	48 00       	.word	0x0048	; ????
     506:	7a 0b       	sbc	r23, r26
     508:	79 51       	subi	r23, 0x19	; 25
     50a:	c3 81       	ldd	r28, Z+3	; 0x03
     50c:	58 5c       	subi	r21, 0xC8	; 200
     50e:	ce 0e       	add	r12, r30
     510:	04 7b       	andi	r16, 0xB4	; 180
     512:	0c 93       	st	X, r16
     514:	91 4a       	sbci	r25, 0xA1	; 161
     516:	44 48       	sbci	r20, 0x84	; 132
     518:	8a 98       	cbi	0x11, 2	; 17
     51a:	90 34       	cpi	r25, 0x40	; 64
     51c:	01 7c       	andi	r16, 0xC1	; 193
     51e:	06 71       	andi	r16, 0x16	; 22
     520:	53 c2       	rjmp	.+1190   	; 0x9c8 <u8g2_font_decode_glyph+0x3a>
     522:	01 7d       	andi	r16, 0xD1	; 209
     524:	0d 93       	st	X+, r16
     526:	91 42       	sbci	r25, 0x21	; 33
     528:	4c 48       	sbci	r20, 0x8C	; 140
     52a:	9a 88       	ldd	r9, Y+18	; 0x12
     52c:	90 14       	cp	r9, r0
     52e:	21 00       	.word	0x0021	; ????
     530:	7e 0a       	sbc	r7, r30
     532:	37 17       	cp	r19, r23
     534:	87 50       	subi	r24, 0x07	; 7
     536:	48 22       	and	r4, r24
     538:	09 00       	.word	0x0009	; ????
     53a:	00 00       	nop
     53c:	00 04       	cpc	r0, r0
     53e:	ff ff       	.word	0xffff	; ????
	...

00000542 <__ctors_end>:
     542:	11 24       	eor	r1, r1
     544:	1f be       	out	0x3f, r1	; 63
     546:	cf ef       	ldi	r28, 0xFF	; 255
     548:	d8 e0       	ldi	r29, 0x08	; 8
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	cd bf       	out	0x3d, r28	; 61

0000054e <__do_copy_data>:
     54e:	11 e0       	ldi	r17, 0x01	; 1
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b1 e0       	ldi	r27, 0x01	; 1
     554:	e4 e9       	ldi	r30, 0x94	; 148
     556:	f3 e2       	ldi	r31, 0x23	; 35
     558:	02 c0       	rjmp	.+4      	; 0x55e <__do_copy_data+0x10>
     55a:	05 90       	lpm	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	aa 3e       	cpi	r26, 0xEA	; 234
     560:	b1 07       	cpc	r27, r17
     562:	d9 f7       	brne	.-10     	; 0x55a <__do_copy_data+0xc>

00000564 <__do_clear_bss>:
     564:	26 e0       	ldi	r18, 0x06	; 6
     566:	aa ee       	ldi	r26, 0xEA	; 234
     568:	b1 e0       	ldi	r27, 0x01	; 1
     56a:	01 c0       	rjmp	.+2      	; 0x56e <.do_clear_bss_start>

0000056c <.do_clear_bss_loop>:
     56c:	1d 92       	st	X+, r1

0000056e <.do_clear_bss_start>:
     56e:	a6 3b       	cpi	r26, 0xB6	; 182
     570:	b2 07       	cpc	r27, r18
     572:	e1 f7       	brne	.-8      	; 0x56c <.do_clear_bss_loop>
     574:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <main>
     578:	0c 94 c8 11 	jmp	0x2390	; 0x2390 <_exit>

0000057c <__bad_interrupt>:
     57c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000580 <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     584:	dc 01       	movw	r26, r24
     586:	ed 91       	ld	r30, X+
     588:	fc 91       	ld	r31, X
     58a:	11 97       	sbiw	r26, 0x01	; 1
     58c:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     58e:	92 96       	adiw	r26, 0x22	; 34
     590:	0d 91       	ld	r16, X+
     592:	1c 91       	ld	r17, X
     594:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
     596:	62 9f       	mul	r22, r18
     598:	b0 01       	movw	r22, r0
     59a:	11 24       	eor	r1, r1
  offset *= 8;
     59c:	66 0f       	add	r22, r22
     59e:	77 1f       	adc	r23, r23
     5a0:	66 0f       	add	r22, r22
     5a2:	77 1f       	adc	r23, r23
     5a4:	66 0f       	add	r22, r22
     5a6:	77 1f       	adc	r23, r23
  ptr += offset;
     5a8:	06 0f       	add	r16, r22
     5aa:	17 1f       	adc	r17, r23
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <u8x8_DrawTile>
}
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	08 95       	ret

000005b8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	8c 01       	movw	r16, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     5c6:	dc 01       	movw	r26, r24
     5c8:	94 96       	adiw	r26, 0x24	; 36
     5ca:	fc 90       	ld	r15, X
     5cc:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
     5ce:	95 96       	adiw	r26, 0x25	; 37
     5d0:	dc 91       	ld	r29, X
     5d2:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     5d4:	ed 91       	ld	r30, X+
     5d6:	fc 91       	ld	r31, X
     5d8:	e1 88       	ldd	r14, Z+17	; 0x11
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
     5da:	c0 e0       	ldi	r28, 0x00	; 0
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
     5dc:	4d 2f       	mov	r20, r29
     5de:	6c 2f       	mov	r22, r28
     5e0:	c8 01       	movw	r24, r16
     5e2:	0e 94 c0 02 	call	0x580	; 0x580 <u8g2_send_tile_row>
    src_row++;
     5e6:	cf 5f       	subi	r28, 0xFF	; 255
    dest_row++;
     5e8:	df 5f       	subi	r29, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
     5ea:	cf 15       	cp	r28, r15
     5ec:	10 f4       	brcc	.+4      	; 0x5f2 <u8g2_send_buffer+0x3a>
     5ee:	de 15       	cp	r29, r14
     5f0:	a8 f3       	brcs	.-22     	; 0x5dc <u8g2_send_buffer+0x24>
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	08 95       	ret

00000600 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     600:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     602:	a0 81       	ld	r26, Z
     604:	b1 81       	ldd	r27, Z+1	; 0x01
     606:	50 96       	adiw	r26, 0x10	; 16
     608:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     60a:	44 a1       	ldd	r20, Z+36	; 0x24
     60c:	94 9f       	mul	r25, r20
     60e:	a0 01       	movw	r20, r0
     610:	11 24       	eor	r1, r1
  cnt *= 8;
     612:	44 0f       	add	r20, r20
     614:	55 1f       	adc	r21, r21
     616:	44 0f       	add	r20, r20
     618:	55 1f       	adc	r21, r21
     61a:	44 0f       	add	r20, r20
     61c:	55 1f       	adc	r21, r21
  memset(u8g2->tile_buf_ptr, 0, cnt);
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	82 a1       	ldd	r24, Z+34	; 0x22
     624:	93 a1       	ldd	r25, Z+35	; 0x23
     626:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <memset>
     62a:	08 95       	ret

0000062c <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
     632:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
     636:	ce 01       	movw	r24, r28
     638:	0e 94 c1 0a 	call	0x1582	; 0x1582 <u8x8_RefreshDisplay>
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	08 95       	ret

00000642 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
     642:	28 e0       	ldi	r18, 0x08	; 8
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18
  return buf;
  #endif
}
     648:	8a ee       	ldi	r24, 0xEA	; 234
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	08 95       	ret

0000064e <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     64e:	cf 92       	push	r12
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	1f 92       	push	r1
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	7c 01       	movw	r14, r24
     666:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
     668:	89 01       	movw	r16, r18
     66a:	9a 01       	movw	r18, r20
     66c:	44 ec       	ldi	r20, 0xC4	; 196
     66e:	59 e0       	ldi	r21, 0x09	; 9
     670:	65 e5       	ldi	r22, 0x55	; 85
     672:	7b e0       	ldi	r23, 0x0B	; 11
     674:	0e 94 9a 0b 	call	0x1734	; 0x1734 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
     678:	ce 01       	movw	r24, r28
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	0e 94 21 03 	call	0x642	; 0x642 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     680:	86 01       	movw	r16, r12
     682:	25 ec       	ldi	r18, 0xC5	; 197
     684:	37 e0       	ldi	r19, 0x07	; 7
     686:	49 81       	ldd	r20, Y+1	; 0x01
     688:	bc 01       	movw	r22, r24
     68a:	c7 01       	movw	r24, r14
     68c:	0e 94 b4 08 	call	0x1168	; 0x1168 <u8g2_SetupBuffer>
}
     690:	0f 90       	pop	r0
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	df 90       	pop	r13
     6a0:	cf 90       	pop	r12
     6a2:	08 95       	ret

000006a4 <u8g2_font_get_byte>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
     6a4:	86 0f       	add	r24, r22
     6a6:	91 1d       	adc	r25, r1
     6a8:	fc 01       	movw	r30, r24
     6aa:	84 91       	lpm	r24, Z
     6ac:	08 95       	ret

000006ae <u8g2_font_get_word>:
     6ae:	fc 01       	movw	r30, r24
     6b0:	e6 0f       	add	r30, r22
     6b2:	f1 1d       	adc	r31, r1
     6b4:	84 91       	lpm	r24, Z
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	31 96       	adiw	r30, 0x01	; 1
     6ba:	98 2f       	mov	r25, r24
     6bc:	88 27       	eor	r24, r24
     6be:	e4 91       	lpm	r30, Z
     6c0:	8e 0f       	add	r24, r30
     6c2:	91 1d       	adc	r25, r1
     6c4:	08 95       	ret

000006c6 <u8g2_font_calc_vref_font>:
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	08 95       	ret

000006ca <u8g2_font_calc_vref_top>:
     6ca:	81 5a       	subi	r24, 0xA1	; 161
     6cc:	9f 4f       	sbci	r25, 0xFF	; 255
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	8f 5f       	subi	r24, 0xFF	; 255
     6d4:	08 95       	ret

000006d6 <u8g2_read_font_info>:
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	ec 01       	movw	r28, r24
     6e0:	8b 01       	movw	r16, r22
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	c8 01       	movw	r24, r16
     6e6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     6ea:	88 83       	st	Y, r24
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	c8 01       	movw	r24, r16
     6f0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     6f4:	89 83       	std	Y+1, r24	; 0x01
     6f6:	62 e0       	ldi	r22, 0x02	; 2
     6f8:	c8 01       	movw	r24, r16
     6fa:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     6fe:	8a 83       	std	Y+2, r24	; 0x02
     700:	63 e0       	ldi	r22, 0x03	; 3
     702:	c8 01       	movw	r24, r16
     704:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     708:	8b 83       	std	Y+3, r24	; 0x03
     70a:	64 e0       	ldi	r22, 0x04	; 4
     70c:	c8 01       	movw	r24, r16
     70e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     712:	8c 83       	std	Y+4, r24	; 0x04
     714:	65 e0       	ldi	r22, 0x05	; 5
     716:	c8 01       	movw	r24, r16
     718:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     71c:	8d 83       	std	Y+5, r24	; 0x05
     71e:	66 e0       	ldi	r22, 0x06	; 6
     720:	c8 01       	movw	r24, r16
     722:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     726:	8e 83       	std	Y+6, r24	; 0x06
     728:	67 e0       	ldi	r22, 0x07	; 7
     72a:	c8 01       	movw	r24, r16
     72c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     730:	8f 83       	std	Y+7, r24	; 0x07
     732:	68 e0       	ldi	r22, 0x08	; 8
     734:	c8 01       	movw	r24, r16
     736:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     73a:	88 87       	std	Y+8, r24	; 0x08
     73c:	69 e0       	ldi	r22, 0x09	; 9
     73e:	c8 01       	movw	r24, r16
     740:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     744:	89 87       	std	Y+9, r24	; 0x09
     746:	6a e0       	ldi	r22, 0x0A	; 10
     748:	c8 01       	movw	r24, r16
     74a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     74e:	8a 87       	std	Y+10, r24	; 0x0a
     750:	6b e0       	ldi	r22, 0x0B	; 11
     752:	c8 01       	movw	r24, r16
     754:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     758:	8b 87       	std	Y+11, r24	; 0x0b
     75a:	6c e0       	ldi	r22, 0x0C	; 12
     75c:	c8 01       	movw	r24, r16
     75e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     762:	8c 87       	std	Y+12, r24	; 0x0c
     764:	6d e0       	ldi	r22, 0x0D	; 13
     766:	c8 01       	movw	r24, r16
     768:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     76c:	8d 87       	std	Y+13, r24	; 0x0d
     76e:	6e e0       	ldi	r22, 0x0E	; 14
     770:	c8 01       	movw	r24, r16
     772:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     776:	8e 87       	std	Y+14, r24	; 0x0e
     778:	6f e0       	ldi	r22, 0x0F	; 15
     77a:	c8 01       	movw	r24, r16
     77c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     780:	8f 87       	std	Y+15, r24	; 0x0f
     782:	60 e1       	ldi	r22, 0x10	; 16
     784:	c8 01       	movw	r24, r16
     786:	0e 94 52 03 	call	0x6a4	; 0x6a4 <u8g2_font_get_byte>
     78a:	88 8b       	std	Y+16, r24	; 0x10
     78c:	61 e1       	ldi	r22, 0x11	; 17
     78e:	c8 01       	movw	r24, r16
     790:	0e 94 57 03 	call	0x6ae	; 0x6ae <u8g2_font_get_word>
     794:	9a 8b       	std	Y+18, r25	; 0x12
     796:	89 8b       	std	Y+17, r24	; 0x11
     798:	63 e1       	ldi	r22, 0x13	; 19
     79a:	c8 01       	movw	r24, r16
     79c:	0e 94 57 03 	call	0x6ae	; 0x6ae <u8g2_font_get_word>
     7a0:	9c 8b       	std	Y+20, r25	; 0x14
     7a2:	8b 8b       	std	Y+19, r24	; 0x13
     7a4:	65 e1       	ldi	r22, 0x15	; 21
     7a6:	c8 01       	movw	r24, r16
     7a8:	0e 94 57 03 	call	0x6ae	; 0x6ae <u8g2_font_get_word>
     7ac:	9e 8b       	std	Y+22, r25	; 0x16
     7ae:	8d 8b       	std	Y+21, r24	; 0x15
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	08 95       	ret

000007ba <u8g2_font_decode_get_unsigned_bits>:
     7ba:	dc 01       	movw	r26, r24
     7bc:	18 96       	adiw	r26, 0x08	; 8
     7be:	4c 91       	ld	r20, X
     7c0:	18 97       	sbiw	r26, 0x08	; 8
     7c2:	ed 91       	ld	r30, X+
     7c4:	fc 91       	ld	r31, X
     7c6:	11 97       	sbiw	r26, 0x01	; 1
     7c8:	24 91       	lpm	r18, Z
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	04 2e       	mov	r0, r20
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <u8g2_font_decode_get_unsigned_bits+0x1a>
     7d0:	35 95       	asr	r19
     7d2:	27 95       	ror	r18
     7d4:	0a 94       	dec	r0
     7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <u8g2_font_decode_get_unsigned_bits+0x16>
     7d8:	82 2f       	mov	r24, r18
     7da:	94 2f       	mov	r25, r20
     7dc:	96 0f       	add	r25, r22
     7de:	98 30       	cpi	r25, 0x08	; 8
     7e0:	80 f0       	brcs	.+32     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7e2:	88 e0       	ldi	r24, 0x08	; 8
     7e4:	84 1b       	sub	r24, r20
     7e6:	31 96       	adiw	r30, 0x01	; 1
     7e8:	11 96       	adiw	r26, 0x01	; 1
     7ea:	fc 93       	st	X, r31
     7ec:	ee 93       	st	-X, r30
     7ee:	e4 91       	lpm	r30, Z
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <u8g2_font_decode_get_unsigned_bits+0x3e>
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	8a 95       	dec	r24
     7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <u8g2_font_decode_get_unsigned_bits+0x3a>
     7fc:	8e 2f       	mov	r24, r30
     7fe:	82 2b       	or	r24, r18
     800:	98 50       	subi	r25, 0x08	; 8
     802:	21 e0       	ldi	r18, 0x01	; 1
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	22 0f       	add	r18, r18
     80a:	33 1f       	adc	r19, r19
     80c:	6a 95       	dec	r22
     80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     810:	21 50       	subi	r18, 0x01	; 1
     812:	18 96       	adiw	r26, 0x08	; 8
     814:	9c 93       	st	X, r25
     816:	82 23       	and	r24, r18
     818:	08 95       	ret

0000081a <u8g2_font_setup_decode>:
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
     824:	8c 01       	movw	r16, r24
     826:	07 5c       	subi	r16, 0xC7	; 199
     828:	1f 4f       	sbci	r17, 0xFF	; 255
     82a:	7a af       	std	Y+58, r23	; 0x3a
     82c:	69 af       	std	Y+57, r22	; 0x39
     82e:	fc 01       	movw	r30, r24
     830:	ef 5b       	subi	r30, 0xBF	; 191
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	10 82       	st	Z, r1
     836:	39 96       	adiw	r30, 0x09	; 9
     838:	60 81       	ld	r22, Z
     83a:	c8 01       	movw	r24, r16
     83c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <u8g2_font_decode_get_unsigned_bits>
     840:	8f af       	std	Y+63, r24	; 0x3f
     842:	fe 01       	movw	r30, r28
     844:	e5 5b       	subi	r30, 0xB5	; 181
     846:	ff 4f       	sbci	r31, 0xFF	; 255
     848:	60 81       	ld	r22, Z
     84a:	c8 01       	movw	r24, r16
     84c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <u8g2_font_decode_get_unsigned_bits>
     850:	fe 01       	movw	r30, r28
     852:	e0 5c       	subi	r30, 0xC0	; 192
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	80 83       	st	Z, r24
     858:	b3 96       	adiw	r30, 0x23	; 35
     85a:	80 81       	ld	r24, Z
     85c:	b0 97       	sbiw	r30, 0x20	; 32
     85e:	80 83       	st	Z, r24
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	81 11       	cpse	r24, r1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	cc 5b       	subi	r28, 0xBC	; 188
     868:	df 4f       	sbci	r29, 0xFF	; 255
     86a:	98 83       	st	Y, r25
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <u8g2_font_decode_get_signed_bits>:
     876:	cf 93       	push	r28
     878:	c6 2f       	mov	r28, r22
     87a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <u8g2_font_decode_get_unsigned_bits>
     87e:	c1 50       	subi	r28, 0x01	; 1
     880:	21 e0       	ldi	r18, 0x01	; 1
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	02 c0       	rjmp	.+4      	; 0x88a <u8g2_font_decode_get_signed_bits+0x14>
     886:	22 0f       	add	r18, r18
     888:	33 1f       	adc	r19, r19
     88a:	ca 95       	dec	r28
     88c:	e2 f7       	brpl	.-8      	; 0x886 <u8g2_font_decode_get_signed_bits+0x10>
     88e:	82 1b       	sub	r24, r18
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <u8g2_add_vector_y>:
     894:	21 30       	cpi	r18, 0x01	; 1
     896:	31 f0       	breq	.+12     	; 0x8a4 <u8g2_add_vector_y+0x10>
     898:	18 f0       	brcs	.+6      	; 0x8a0 <u8g2_add_vector_y+0xc>
     89a:	22 30       	cpi	r18, 0x02	; 2
     89c:	29 f0       	breq	.+10     	; 0x8a8 <u8g2_add_vector_y+0x14>
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <u8g2_add_vector_y+0x18>
     8a0:	84 0f       	add	r24, r20
     8a2:	08 95       	ret
     8a4:	86 0f       	add	r24, r22
     8a6:	08 95       	ret
     8a8:	84 1b       	sub	r24, r20
     8aa:	08 95       	ret
     8ac:	86 1b       	sub	r24, r22
     8ae:	08 95       	ret

000008b0 <u8g2_add_vector_x>:
     8b0:	21 30       	cpi	r18, 0x01	; 1
     8b2:	31 f0       	breq	.+12     	; 0x8c0 <u8g2_add_vector_x+0x10>
     8b4:	18 f0       	brcs	.+6      	; 0x8bc <u8g2_add_vector_x+0xc>
     8b6:	22 30       	cpi	r18, 0x02	; 2
     8b8:	29 f0       	breq	.+10     	; 0x8c4 <u8g2_add_vector_x+0x14>
     8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <u8g2_add_vector_x+0x18>
     8bc:	86 0f       	add	r24, r22
     8be:	08 95       	ret
     8c0:	84 1b       	sub	r24, r20
     8c2:	08 95       	ret
     8c4:	86 1b       	sub	r24, r22
     8c6:	08 95       	ret
     8c8:	84 0f       	add	r24, r20
     8ca:	08 95       	ret

000008cc <u8g2_font_decode_len>:
     8cc:	8f 92       	push	r8
     8ce:	9f 92       	push	r9
     8d0:	af 92       	push	r10
     8d2:	bf 92       	push	r11
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	ec 01       	movw	r28, r24
     8e6:	d6 2e       	mov	r13, r22
     8e8:	94 2e       	mov	r9, r20
     8ea:	cd ac       	ldd	r12, Y+61	; 0x3d
     8ec:	ee ac       	ldd	r14, Y+62	; 0x3e
     8ee:	1f ad       	ldd	r17, Y+63	; 0x3f
     8f0:	1c 19       	sub	r17, r12
     8f2:	d1 16       	cp	r13, r17
     8f4:	10 f0       	brcs	.+4      	; 0x8fa <u8g2_font_decode_len+0x2e>
     8f6:	a1 2e       	mov	r10, r17
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <u8g2_font_decode_len+0x30>
     8fa:	ad 2c       	mov	r10, r13
     8fc:	fc ac       	ldd	r15, Y+60	; 0x3c
     8fe:	fe 01       	movw	r30, r28
     900:	eb 5b       	subi	r30, 0xBB	; 187
     902:	ff 4f       	sbci	r31, 0xFF	; 255
     904:	00 81       	ld	r16, Z
     906:	8e 2c       	mov	r8, r14
     908:	20 2f       	mov	r18, r16
     90a:	4e 2d       	mov	r20, r14
     90c:	6c 2d       	mov	r22, r12
     90e:	8b ad       	ldd	r24, Y+59	; 0x3b
     910:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_add_vector_x>
     914:	b8 2e       	mov	r11, r24
     916:	20 2f       	mov	r18, r16
     918:	4e 2d       	mov	r20, r14
     91a:	6c 2d       	mov	r22, r12
     91c:	8f 2d       	mov	r24, r15
     91e:	0e 94 4a 04 	call	0x894	; 0x894 <u8g2_add_vector_y>
     922:	99 20       	and	r9, r9
     924:	69 f0       	breq	.+26     	; 0x940 <__stack+0x41>
     926:	fe 01       	movw	r30, r28
     928:	ed 5b       	subi	r30, 0xBD	; 189
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	90 81       	ld	r25, Z
     92e:	b0 96       	adiw	r30, 0x20	; 32
     930:	90 83       	st	Z, r25
     932:	2a 2d       	mov	r18, r10
     934:	48 2f       	mov	r20, r24
     936:	6b 2d       	mov	r22, r11
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 20 07 	call	0xe40	; 0xe40 <u8g2_DrawHVLine>
     93e:	10 c0       	rjmp	.+32     	; 0x960 <__stack+0x61>
     940:	fe 01       	movw	r30, r28
     942:	ee 5b       	subi	r30, 0xBE	; 190
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	90 81       	ld	r25, Z
     948:	91 11       	cpse	r25, r1
     94a:	0a c0       	rjmp	.+20     	; 0x960 <__stack+0x61>
     94c:	32 96       	adiw	r30, 0x02	; 2
     94e:	90 81       	ld	r25, Z
     950:	7f 96       	adiw	r30, 0x1f	; 31
     952:	90 83       	st	Z, r25
     954:	2a 2d       	mov	r18, r10
     956:	48 2f       	mov	r20, r24
     958:	6b 2d       	mov	r22, r11
     95a:	ce 01       	movw	r24, r28
     95c:	0e 94 20 07 	call	0xe40	; 0xe40 <u8g2_DrawHVLine>
     960:	d1 16       	cp	r13, r17
     962:	20 f0       	brcs	.+8      	; 0x96c <__stack+0x6d>
     964:	d1 1a       	sub	r13, r17
     966:	e3 94       	inc	r14
     968:	c1 2c       	mov	r12, r1
     96a:	c1 cf       	rjmp	.-126    	; 0x8ee <u8g2_font_decode_len+0x22>
     96c:	6d 2d       	mov	r22, r13
     96e:	6c 0d       	add	r22, r12
     970:	6d af       	std	Y+61, r22	; 0x3d
     972:	8e ae       	std	Y+62, r8	; 0x3e
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	cf 90       	pop	r12
     984:	bf 90       	pop	r11
     986:	af 90       	pop	r10
     988:	9f 90       	pop	r9
     98a:	8f 90       	pop	r8
     98c:	08 95       	ret

0000098e <u8g2_font_decode_glyph>:
     98e:	9f 92       	push	r9
     990:	af 92       	push	r10
     992:	bf 92       	push	r11
     994:	cf 92       	push	r12
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	ec 01       	movw	r28, r24
     9a6:	7c 01       	movw	r14, r24
     9a8:	89 e3       	ldi	r24, 0x39	; 57
     9aa:	e8 0e       	add	r14, r24
     9ac:	f1 1c       	adc	r15, r1
     9ae:	ce 01       	movw	r24, r28
     9b0:	0e 94 0d 04 	call	0x81a	; 0x81a <u8g2_font_setup_decode>
     9b4:	fe 01       	movw	r30, r28
     9b6:	e0 5c       	subi	r30, 0xC0	; 192
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ba:	d0 80       	ld	r13, Z
     9bc:	3c 96       	adiw	r30, 0x0c	; 12
     9be:	60 81       	ld	r22, Z
     9c0:	c7 01       	movw	r24, r14
     9c2:	0e 94 3b 04 	call	0x876	; 0x876 <u8g2_font_decode_get_signed_bits>
     9c6:	98 2e       	mov	r9, r24
     9c8:	fe 01       	movw	r30, r28
     9ca:	e3 5b       	subi	r30, 0xB3	; 179
     9cc:	ff 4f       	sbci	r31, 0xFF	; 255
     9ce:	60 81       	ld	r22, Z
     9d0:	c7 01       	movw	r24, r14
     9d2:	0e 94 3b 04 	call	0x876	; 0x876 <u8g2_font_decode_get_signed_bits>
     9d6:	18 2f       	mov	r17, r24
     9d8:	fe 01       	movw	r30, r28
     9da:	e2 5b       	subi	r30, 0xB2	; 178
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	60 81       	ld	r22, Z
     9e0:	c7 01       	movw	r24, r14
     9e2:	0e 94 3b 04 	call	0x876	; 0x876 <u8g2_font_decode_get_signed_bits>
     9e6:	c8 2e       	mov	r12, r24
     9e8:	bf ac       	ldd	r11, Y+63	; 0x3f
     9ea:	1b 14       	cp	r1, r11
     9ec:	0c f0       	brlt	.+2      	; 0x9f0 <u8g2_font_decode_glyph+0x62>
     9ee:	78 c0       	rjmp	.+240    	; 0xae0 <u8g2_font_decode_glyph+0x152>
     9f0:	fe 01       	movw	r30, r28
     9f2:	eb 5b       	subi	r30, 0xBB	; 187
     9f4:	ff 4f       	sbci	r31, 0xFF	; 255
     9f6:	00 81       	ld	r16, Z
     9f8:	1d 0d       	add	r17, r13
     9fa:	11 95       	neg	r17
     9fc:	20 2f       	mov	r18, r16
     9fe:	41 2f       	mov	r20, r17
     a00:	69 2d       	mov	r22, r9
     a02:	8b ad       	ldd	r24, Y+59	; 0x3b
     a04:	0e 94 58 04 	call	0x8b0	; 0x8b0 <u8g2_add_vector_x>
     a08:	a8 2e       	mov	r10, r24
     a0a:	8b af       	std	Y+59, r24	; 0x3b
     a0c:	20 2f       	mov	r18, r16
     a0e:	41 2f       	mov	r20, r17
     a10:	69 2d       	mov	r22, r9
     a12:	8c ad       	ldd	r24, Y+60	; 0x3c
     a14:	0e 94 4a 04 	call	0x894	; 0x894 <u8g2_add_vector_y>
     a18:	8c af       	std	Y+60, r24	; 0x3c
     a1a:	01 30       	cpi	r16, 0x01	; 1
     a1c:	59 f0       	breq	.+22     	; 0xa34 <u8g2_font_decode_glyph+0xa6>
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <u8g2_font_decode_glyph+0x9c>
     a20:	02 30       	cpi	r16, 0x02	; 2
     a22:	91 f0       	breq	.+36     	; 0xa48 <u8g2_font_decode_glyph+0xba>
     a24:	03 30       	cpi	r16, 0x03	; 3
     a26:	f1 f0       	breq	.+60     	; 0xa64 <u8g2_font_decode_glyph+0xd6>
     a28:	26 c0       	rjmp	.+76     	; 0xa76 <u8g2_font_decode_glyph+0xe8>
     a2a:	2b 2d       	mov	r18, r11
     a2c:	2a 0d       	add	r18, r10
     a2e:	0d 2d       	mov	r16, r13
     a30:	08 0f       	add	r16, r24
     a32:	23 c0       	rjmp	.+70     	; 0xa7a <u8g2_font_decode_glyph+0xec>
     a34:	9a 2d       	mov	r25, r10
     a36:	9d 19       	sub	r25, r13
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	2a 0d       	add	r18, r10
     a3c:	0b 2d       	mov	r16, r11
     a3e:	08 0f       	add	r16, r24
     a40:	aa 24       	eor	r10, r10
     a42:	a3 94       	inc	r10
     a44:	a9 0e       	add	r10, r25
     a46:	19 c0       	rjmp	.+50     	; 0xa7a <u8g2_font_decode_glyph+0xec>
     a48:	9a 2d       	mov	r25, r10
     a4a:	9b 19       	sub	r25, r11
     a4c:	21 e0       	ldi	r18, 0x01	; 1
     a4e:	2a 0d       	add	r18, r10
     a50:	38 2f       	mov	r19, r24
     a52:	3d 19       	sub	r19, r13
     a54:	01 e0       	ldi	r16, 0x01	; 1
     a56:	08 0f       	add	r16, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	83 0f       	add	r24, r19
     a5c:	aa 24       	eor	r10, r10
     a5e:	a3 94       	inc	r10
     a60:	a9 0e       	add	r10, r25
     a62:	0b c0       	rjmp	.+22     	; 0xa7a <u8g2_font_decode_glyph+0xec>
     a64:	2d 2d       	mov	r18, r13
     a66:	2a 0d       	add	r18, r10
     a68:	98 2f       	mov	r25, r24
     a6a:	9b 19       	sub	r25, r11
     a6c:	01 e0       	ldi	r16, 0x01	; 1
     a6e:	08 0f       	add	r16, r24
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	89 0f       	add	r24, r25
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <u8g2_font_decode_glyph+0xec>
     a76:	08 2f       	mov	r16, r24
     a78:	2a 2d       	mov	r18, r10
     a7a:	48 2f       	mov	r20, r24
     a7c:	6a 2d       	mov	r22, r10
     a7e:	ce 01       	movw	r24, r28
     a80:	0e 94 aa 07 	call	0xf54	; 0xf54 <u8g2_IsIntersection>
     a84:	88 23       	and	r24, r24
     a86:	61 f1       	breq	.+88     	; 0xae0 <u8g2_font_decode_glyph+0x152>
     a88:	1d ae       	std	Y+61, r1	; 0x3d
     a8a:	1e ae       	std	Y+62, r1	; 0x3e
     a8c:	fe 01       	movw	r30, r28
     a8e:	e8 5b       	subi	r30, 0xB8	; 184
     a90:	ff 4f       	sbci	r31, 0xFF	; 255
     a92:	60 81       	ld	r22, Z
     a94:	c7 01       	movw	r24, r14
     a96:	0e 94 dd 03 	call	0x7ba	; 0x7ba <u8g2_font_decode_get_unsigned_bits>
     a9a:	08 2f       	mov	r16, r24
     a9c:	fe 01       	movw	r30, r28
     a9e:	e7 5b       	subi	r30, 0xB7	; 183
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	60 81       	ld	r22, Z
     aa4:	c7 01       	movw	r24, r14
     aa6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <u8g2_font_decode_get_unsigned_bits>
     aaa:	18 2f       	mov	r17, r24
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	60 2f       	mov	r22, r16
     ab0:	ce 01       	movw	r24, r28
     ab2:	0e 94 66 04 	call	0x8cc	; 0x8cc <u8g2_font_decode_len>
     ab6:	41 e0       	ldi	r20, 0x01	; 1
     ab8:	61 2f       	mov	r22, r17
     aba:	ce 01       	movw	r24, r28
     abc:	0e 94 66 04 	call	0x8cc	; 0x8cc <u8g2_font_decode_len>
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	c7 01       	movw	r24, r14
     ac4:	0e 94 dd 03 	call	0x7ba	; 0x7ba <u8g2_font_decode_get_unsigned_bits>
     ac8:	81 11       	cpse	r24, r1
     aca:	f0 cf       	rjmp	.-32     	; 0xaac <u8g2_font_decode_glyph+0x11e>
     acc:	8e ad       	ldd	r24, Y+62	; 0x3e
     ace:	8d 15       	cp	r24, r13
     ad0:	ec f2       	brlt	.-70     	; 0xa8c <u8g2_font_decode_glyph+0xfe>
     ad2:	fe 01       	movw	r30, r28
     ad4:	ed 5b       	subi	r30, 0xBD	; 189
     ad6:	ff 4f       	sbci	r31, 0xFF	; 255
     ad8:	80 81       	ld	r24, Z
     ada:	cd 59       	subi	r28, 0x9D	; 157
     adc:	df 4f       	sbci	r29, 0xFF	; 255
     ade:	88 83       	st	Y, r24
     ae0:	8c 2d       	mov	r24, r12
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	08 95       	ret

00000afa <u8g2_font_get_glyph_data>:
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	fc 01       	movw	r30, r24
     b08:	c5 a9       	ldd	r28, Z+53	; 0x35
     b0a:	d6 a9       	ldd	r29, Z+54	; 0x36
     b0c:	67 96       	adiw	r28, 0x17	; 23
     b0e:	6f 3f       	cpi	r22, 0xFF	; 255
     b10:	71 05       	cpc	r23, r1
     b12:	09 f0       	breq	.+2      	; 0xb16 <u8g2_font_get_glyph_data+0x1c>
     b14:	40 f5       	brcc	.+80     	; 0xb66 <u8g2_font_get_glyph_data+0x6c>
     b16:	61 36       	cpi	r22, 0x61	; 97
     b18:	71 05       	cpc	r23, r1
     b1a:	38 f0       	brcs	.+14     	; 0xb2a <u8g2_font_get_glyph_data+0x30>
     b1c:	e7 5a       	subi	r30, 0xA7	; 167
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	c8 0f       	add	r28, r24
     b26:	d9 1f       	adc	r29, r25
     b28:	0a c0       	rjmp	.+20     	; 0xb3e <u8g2_font_get_glyph_data+0x44>
     b2a:	61 34       	cpi	r22, 0x41	; 65
     b2c:	71 05       	cpc	r23, r1
     b2e:	38 f0       	brcs	.+14     	; 0xb3e <u8g2_font_get_glyph_data+0x44>
     b30:	fc 01       	movw	r30, r24
     b32:	e9 5a       	subi	r30, 0xA9	; 169
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	80 81       	ld	r24, Z
     b38:	91 81       	ldd	r25, Z+1	; 0x01
     b3a:	c8 0f       	add	r28, r24
     b3c:	d9 1f       	adc	r29, r25
     b3e:	ce 01       	movw	r24, r28
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	fc 01       	movw	r30, r24
     b44:	24 91       	lpm	r18, Z
     b46:	22 23       	and	r18, r18
     b48:	09 f4       	brne	.+2      	; 0xb4c <u8g2_font_get_glyph_data+0x52>
     b4a:	3c c0       	rjmp	.+120    	; 0xbc4 <u8g2_font_get_glyph_data+0xca>
     b4c:	fe 01       	movw	r30, r28
     b4e:	24 91       	lpm	r18, Z
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	62 17       	cp	r22, r18
     b54:	73 07       	cpc	r23, r19
     b56:	11 f4       	brne	.+4      	; 0xb5c <u8g2_font_get_glyph_data+0x62>
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	39 c0       	rjmp	.+114    	; 0xbce <u8g2_font_get_glyph_data+0xd4>
     b5c:	fc 01       	movw	r30, r24
     b5e:	84 91       	lpm	r24, Z
     b60:	c8 0f       	add	r28, r24
     b62:	d1 1d       	adc	r29, r1
     b64:	ec cf       	rjmp	.-40     	; 0xb3e <u8g2_font_get_glyph_data+0x44>
     b66:	8b 01       	movw	r16, r22
     b68:	fc 01       	movw	r30, r24
     b6a:	e5 5a       	subi	r30, 0xA5	; 165
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	c8 0f       	add	r28, r24
     b74:	d9 1f       	adc	r29, r25
     b76:	7e 01       	movw	r14, r28
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	c7 01       	movw	r24, r14
     b7c:	0e 94 57 03 	call	0x6ae	; 0x6ae <u8g2_font_get_word>
     b80:	c8 0f       	add	r28, r24
     b82:	d9 1f       	adc	r29, r25
     b84:	62 e0       	ldi	r22, 0x02	; 2
     b86:	c7 01       	movw	r24, r14
     b88:	0e 94 57 03 	call	0x6ae	; 0x6ae <u8g2_font_get_word>
     b8c:	f4 e0       	ldi	r31, 0x04	; 4
     b8e:	ef 0e       	add	r14, r31
     b90:	f1 1c       	adc	r15, r1
     b92:	80 17       	cp	r24, r16
     b94:	91 07       	cpc	r25, r17
     b96:	80 f3       	brcs	.-32     	; 0xb78 <u8g2_font_get_glyph_data+0x7e>
     b98:	fe 01       	movw	r30, r28
     b9a:	84 91       	lpm	r24, Z
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	98 2f       	mov	r25, r24
     ba0:	88 27       	eor	r24, r24
     ba2:	31 96       	adiw	r30, 0x01	; 1
     ba4:	e4 91       	lpm	r30, Z
     ba6:	8e 2b       	or	r24, r30
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	79 f0       	breq	.+30     	; 0xbca <u8g2_font_get_glyph_data+0xd0>
     bac:	08 17       	cp	r16, r24
     bae:	19 07       	cpc	r17, r25
     bb0:	19 f4       	brne	.+6      	; 0xbb8 <u8g2_font_get_glyph_data+0xbe>
     bb2:	ce 01       	movw	r24, r28
     bb4:	03 96       	adiw	r24, 0x03	; 3
     bb6:	0b c0       	rjmp	.+22     	; 0xbce <u8g2_font_get_glyph_data+0xd4>
     bb8:	fe 01       	movw	r30, r28
     bba:	32 96       	adiw	r30, 0x02	; 2
     bbc:	e4 91       	lpm	r30, Z
     bbe:	ce 0f       	add	r28, r30
     bc0:	d1 1d       	adc	r29, r1
     bc2:	ea cf       	rjmp	.-44     	; 0xb98 <u8g2_font_get_glyph_data+0x9e>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <u8g2_font_get_glyph_data+0xd4>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <u8g2_font_draw_glyph>:
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
     be2:	6b af       	std	Y+59, r22	; 0x3b
     be4:	4c af       	std	Y+60, r20	; 0x3c
     be6:	b9 01       	movw	r22, r18
     be8:	0e 94 7d 05 	call	0xafa	; 0xafa <u8g2_font_get_glyph_data>
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	29 f0       	breq	.+10     	; 0xbfa <u8g2_font_draw_glyph+0x1e>
     bf0:	bc 01       	movw	r22, r24
     bf2:	ce 01       	movw	r24, r28
     bf4:	0e 94 c7 04 	call	0x98e	; 0x98e <u8g2_font_decode_glyph>
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <u8g2_font_draw_glyph+0x20>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <u8g2_DrawGlyph>:
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	ec 01       	movw	r28, r24
     c10:	16 2f       	mov	r17, r22
     c12:	04 2f       	mov	r16, r20
     c14:	79 01       	movw	r14, r18
     c16:	fc 01       	movw	r30, r24
     c18:	eb 5b       	subi	r30, 0xBB	; 187
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	80 81       	ld	r24, Z
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	61 f0       	breq	.+24     	; 0xc3a <u8g2_DrawGlyph+0x38>
     c22:	28 f0       	brcs	.+10     	; 0xc2e <u8g2_DrawGlyph+0x2c>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	79 f0       	breq	.+30     	; 0xc46 <u8g2_DrawGlyph+0x44>
     c28:	83 30       	cpi	r24, 0x03	; 3
     c2a:	99 f0       	breq	.+38     	; 0xc52 <u8g2_DrawGlyph+0x50>
     c2c:	17 c0       	rjmp	.+46     	; 0xc5c <u8g2_DrawGlyph+0x5a>
     c2e:	ef a9       	ldd	r30, Y+55	; 0x37
     c30:	f8 ad       	ldd	r31, Y+56	; 0x38
     c32:	ce 01       	movw	r24, r28
     c34:	09 95       	icall
     c36:	08 0f       	add	r16, r24
     c38:	11 c0       	rjmp	.+34     	; 0xc5c <u8g2_DrawGlyph+0x5a>
     c3a:	ef a9       	ldd	r30, Y+55	; 0x37
     c3c:	f8 ad       	ldd	r31, Y+56	; 0x38
     c3e:	ce 01       	movw	r24, r28
     c40:	09 95       	icall
     c42:	18 1b       	sub	r17, r24
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <u8g2_DrawGlyph+0x5a>
     c46:	ef a9       	ldd	r30, Y+55	; 0x37
     c48:	f8 ad       	ldd	r31, Y+56	; 0x38
     c4a:	ce 01       	movw	r24, r28
     c4c:	09 95       	icall
     c4e:	08 1b       	sub	r16, r24
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <u8g2_DrawGlyph+0x5a>
     c52:	ef a9       	ldd	r30, Y+55	; 0x37
     c54:	f8 ad       	ldd	r31, Y+56	; 0x38
     c56:	ce 01       	movw	r24, r28
     c58:	09 95       	icall
     c5a:	18 0f       	add	r17, r24
     c5c:	97 01       	movw	r18, r14
     c5e:	40 2f       	mov	r20, r16
     c60:	61 2f       	mov	r22, r17
     c62:	ce 01       	movw	r24, r28
     c64:	0e 94 ee 05 	call	0xbdc	; 0xbdc <u8g2_font_draw_glyph>
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	08 95       	ret

00000c76 <u8g2_draw_string>:
     c76:	df 92       	push	r13
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	ec 01       	movw	r28, r24
     c86:	d6 2e       	mov	r13, r22
     c88:	e4 2e       	mov	r14, r20
     c8a:	89 01       	movw	r16, r18
     c8c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <u8x8_utf8_init>
     c90:	f1 2c       	mov	r15, r1
     c92:	ea 81       	ldd	r30, Y+2	; 0x02
     c94:	fb 81       	ldd	r31, Y+3	; 0x03
     c96:	d8 01       	movw	r26, r16
     c98:	6c 91       	ld	r22, X
     c9a:	ce 01       	movw	r24, r28
     c9c:	09 95       	icall
     c9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ca0:	bf ef       	ldi	r27, 0xFF	; 255
     ca2:	9b 07       	cpc	r25, r27
     ca4:	09 f1       	breq	.+66     	; 0xce8 <u8g2_draw_string+0x72>
     ca6:	0f 5f       	subi	r16, 0xFF	; 255
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	8e 3f       	cpi	r24, 0xFE	; 254
     cac:	2f ef       	ldi	r18, 0xFF	; 255
     cae:	92 07       	cpc	r25, r18
     cb0:	81 f3       	breq	.-32     	; 0xc92 <u8g2_draw_string+0x1c>
     cb2:	9c 01       	movw	r18, r24
     cb4:	4e 2d       	mov	r20, r14
     cb6:	6d 2d       	mov	r22, r13
     cb8:	ce 01       	movw	r24, r28
     cba:	0e 94 01 06 	call	0xc02	; 0xc02 <u8g2_DrawGlyph>
     cbe:	fe 01       	movw	r30, r28
     cc0:	eb 5b       	subi	r30, 0xBB	; 187
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	90 81       	ld	r25, Z
     cc6:	91 30       	cpi	r25, 0x01	; 1
     cc8:	41 f0       	breq	.+16     	; 0xcda <u8g2_draw_string+0x64>
     cca:	28 f0       	brcs	.+10     	; 0xcd6 <u8g2_draw_string+0x60>
     ccc:	92 30       	cpi	r25, 0x02	; 2
     cce:	39 f0       	breq	.+14     	; 0xcde <u8g2_draw_string+0x68>
     cd0:	93 30       	cpi	r25, 0x03	; 3
     cd2:	39 f0       	breq	.+14     	; 0xce2 <u8g2_draw_string+0x6c>
     cd4:	07 c0       	rjmp	.+14     	; 0xce4 <u8g2_draw_string+0x6e>
     cd6:	d8 0e       	add	r13, r24
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <u8g2_draw_string+0x6e>
     cda:	e8 0e       	add	r14, r24
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <u8g2_draw_string+0x6e>
     cde:	d8 1a       	sub	r13, r24
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <u8g2_draw_string+0x6e>
     ce2:	e8 1a       	sub	r14, r24
     ce4:	f8 0e       	add	r15, r24
     ce6:	d5 cf       	rjmp	.-86     	; 0xc92 <u8g2_draw_string+0x1c>
     ce8:	8f 2d       	mov	r24, r15
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	df 90       	pop	r13
     cf8:	08 95       	ret

00000cfa <u8g2_DrawStr>:
     cfa:	e1 ee       	ldi	r30, 0xE1	; 225
     cfc:	f8 e0       	ldi	r31, 0x08	; 8
     cfe:	dc 01       	movw	r26, r24
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	fc 93       	st	X, r31
     d04:	ee 93       	st	-X, r30
     d06:	12 97       	sbiw	r26, 0x02	; 2
     d08:	0e 94 3b 06 	call	0xc76	; 0xc76 <u8g2_draw_string>
     d0c:	08 95       	ret

00000d0e <u8g2_UpdateRefHeight>:
     d0e:	fc 01       	movw	r30, r24
     d10:	25 a9       	ldd	r18, Z+53	; 0x35
     d12:	36 a9       	ldd	r19, Z+54	; 0x36
     d14:	23 2b       	or	r18, r19
     d16:	e9 f1       	breq	.+122    	; 0xd92 <u8g2_UpdateRefHeight+0x84>
     d18:	ed 5a       	subi	r30, 0xAD	; 173
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	20 81       	ld	r18, Z
     d1e:	3c 96       	adiw	r30, 0x0c	; 12
     d20:	20 83       	st	Z, r18
     d22:	3b 97       	sbiw	r30, 0x0b	; 11
     d24:	40 81       	ld	r20, Z
     d26:	3c 96       	adiw	r30, 0x0c	; 12
     d28:	40 83       	st	Z, r20
     d2a:	32 97       	sbiw	r30, 0x02	; 2
     d2c:	30 81       	ld	r19, Z
     d2e:	33 23       	and	r19, r19
     d30:	81 f1       	breq	.+96     	; 0xd92 <u8g2_UpdateRefHeight+0x84>
     d32:	31 30       	cpi	r19, 0x01	; 1
     d34:	79 f4       	brne	.+30     	; 0xd54 <u8g2_UpdateRefHeight+0x46>
     d36:	39 97       	sbiw	r30, 0x09	; 9
     d38:	30 81       	ld	r19, Z
     d3a:	23 17       	cp	r18, r19
     d3c:	14 f4       	brge	.+4      	; 0xd42 <u8g2_UpdateRefHeight+0x34>
     d3e:	3a 96       	adiw	r30, 0x0a	; 10
     d40:	30 83       	st	Z, r19
     d42:	fc 01       	movw	r30, r24
     d44:	ea 5a       	subi	r30, 0xAA	; 170
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	20 81       	ld	r18, Z
     d4a:	24 17       	cp	r18, r20
     d4c:	14 f5       	brge	.+68     	; 0xd92 <u8g2_UpdateRefHeight+0x84>
     d4e:	3a 96       	adiw	r30, 0x0a	; 10
     d50:	20 83       	st	Z, r18
     d52:	08 95       	ret
     d54:	02 2e       	mov	r0, r18
     d56:	00 0c       	add	r0, r0
     d58:	33 0b       	sbc	r19, r19
     d5a:	fc 01       	movw	r30, r24
     d5c:	e0 5b       	subi	r30, 0xB0	; 176
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	e0 81       	ld	r30, Z
     d62:	dc 01       	movw	r26, r24
     d64:	ae 5a       	subi	r26, 0xAE	; 174
     d66:	bf 4f       	sbci	r27, 0xFF	; 255
     d68:	5c 91       	ld	r21, X
     d6a:	65 2f       	mov	r22, r21
     d6c:	05 2e       	mov	r0, r21
     d6e:	00 0c       	add	r0, r0
     d70:	77 0b       	sbc	r23, r23
     d72:	6e 0f       	add	r22, r30
     d74:	71 1d       	adc	r23, r1
     d76:	e7 fd       	sbrc	r30, 7
     d78:	7a 95       	dec	r23
     d7a:	26 17       	cp	r18, r22
     d7c:	37 07       	cpc	r19, r23
     d7e:	1c f4       	brge	.+6      	; 0xd86 <u8g2_UpdateRefHeight+0x78>
     d80:	1d 96       	adiw	r26, 0x0d	; 13
     d82:	e5 0f       	add	r30, r21
     d84:	ec 93       	st	X, r30
     d86:	54 17       	cp	r21, r20
     d88:	24 f4       	brge	.+8      	; 0xd92 <u8g2_UpdateRefHeight+0x84>
     d8a:	fc 01       	movw	r30, r24
     d8c:	e0 5a       	subi	r30, 0xA0	; 160
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	50 83       	st	Z, r21
     d92:	08 95       	ret

00000d94 <u8g2_SetFontRefHeightText>:
     d94:	fc 01       	movw	r30, r24
     d96:	e2 5a       	subi	r30, 0xA2	; 162
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	10 82       	st	Z, r1
     d9c:	0e 94 87 06 	call	0xd0e	; 0xd0e <u8g2_UpdateRefHeight>
     da0:	08 95       	ret

00000da2 <u8g2_SetFontPosBaseline>:
     da2:	23 e6       	ldi	r18, 0x63	; 99
     da4:	33 e0       	ldi	r19, 0x03	; 3
     da6:	fc 01       	movw	r30, r24
     da8:	30 af       	std	Z+56, r19	; 0x38
     daa:	27 ab       	std	Z+55, r18	; 0x37
     dac:	08 95       	ret

00000dae <u8g2_SetFontPosTop>:
     dae:	25 e6       	ldi	r18, 0x65	; 101
     db0:	33 e0       	ldi	r19, 0x03	; 3
     db2:	fc 01       	movw	r30, r24
     db4:	30 af       	std	Z+56, r19	; 0x38
     db6:	27 ab       	std	Z+55, r18	; 0x37
     db8:	08 95       	ret

00000dba <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
  if ( u8g2->font != font )
     dbe:	fc 01       	movw	r30, r24
     dc0:	25 a9       	ldd	r18, Z+53	; 0x35
     dc2:	36 a9       	ldd	r19, Z+54	; 0x36
     dc4:	26 17       	cp	r18, r22
     dc6:	37 07       	cpc	r19, r23
     dc8:	51 f0       	breq	.+20     	; 0xdde <u8g2_SetFont+0x24>
     dca:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
     dcc:	76 ab       	std	Z+54, r23	; 0x36
     dce:	65 ab       	std	Z+53, r22	; 0x35
    u8g2_read_font_info(&(u8g2->font_info), font);
     dd0:	8a 5b       	subi	r24, 0xBA	; 186
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
     dd8:	ce 01       	movw	r24, r28
     dda:	0e 94 87 06 	call	0xd0e	; 0xd0e <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
     de4:	fc 01       	movw	r30, r24
  u8g2_uint_t a = *ap;
     de6:	30 81       	ld	r19, Z
  u8g2_uint_t b;
  b  = a;
  b += *len;
     de8:	db 01       	movw	r26, r22
     dea:	9c 91       	ld	r25, X
     dec:	93 0f       	add	r25, r19
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
     dee:	93 17       	cp	r25, r19
     df0:	30 f4       	brcc	.+12     	; 0xdfe <u8g2_clip_intersection2+0x1a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
     df2:	32 17       	cp	r19, r18
     df4:	18 f4       	brcc	.+6      	; 0xdfc <u8g2_clip_intersection2+0x18>
    {
      b = d;
      b--;
     df6:	9f ef       	ldi	r25, 0xFF	; 255
     df8:	92 0f       	add	r25, r18
     dfa:	01 c0       	rjmp	.+2      	; 0xdfe <u8g2_clip_intersection2+0x1a>
    }
    else
    {
      a = c;
     dfc:	34 2f       	mov	r19, r20
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
     dfe:	32 17       	cp	r19, r18
     e00:	70 f4       	brcc	.+28     	; 0xe1e <u8g2_clip_intersection2+0x3a>
    return 0;
  if ( b <= c )
     e02:	49 17       	cp	r20, r25
     e04:	70 f4       	brcc	.+28     	; 0xe22 <u8g2_clip_intersection2+0x3e>
    return 0;
  if ( a < c )		
     e06:	34 17       	cp	r19, r20
     e08:	08 f0       	brcs	.+2      	; 0xe0c <u8g2_clip_intersection2+0x28>
     e0a:	43 2f       	mov	r20, r19
    a = c;
  if ( b > d )
     e0c:	29 17       	cp	r18, r25
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <u8g2_clip_intersection2+0x2e>
     e10:	29 2f       	mov	r18, r25
    b = d;
  
  *ap = a;
     e12:	40 83       	st	Z, r20
  b -= a;
     e14:	24 1b       	sub	r18, r20
  *len = b;
     e16:	fb 01       	movw	r30, r22
     e18:	20 83       	st	Z, r18
  return 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	08 95       	ret
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	08 95       	ret
  if ( b <= c )
    return 0;
     e22:	80 e0       	ldi	r24, 0x00	; 0
  
  *ap = a;
  b -= a;
  *len = b;
  return 1;
}
     e24:	08 95       	ret

00000e26 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     e26:	0f 93       	push	r16

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
     e28:	dc 01       	movw	r26, r24
     e2a:	98 96       	adiw	r26, 0x28	; 40
     e2c:	3c 91       	ld	r19, X
     e2e:	98 97       	sbiw	r26, 0x28	; 40
     e30:	43 1b       	sub	r20, r19
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
     e32:	5e 96       	adiw	r26, 0x1e	; 30
     e34:	ed 91       	ld	r30, X+
     e36:	fc 91       	ld	r31, X
     e38:	5f 97       	sbiw	r26, 0x1f	; 31
     e3a:	09 95       	icall
}
     e3c:	0f 91       	pop	r16
     e3e:	08 95       	ret

00000e40 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <u8g2_DrawHVLine+0xe>
     e4e:	1f 92       	push	r1
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	69 83       	std	Y+1, r22	; 0x01
     e56:	4a 83       	std	Y+2, r20	; 0x02
     e58:	2b 83       	std	Y+3, r18	; 0x03
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
     e5a:	fc 01       	movw	r30, r24
     e5c:	e3 5a       	subi	r30, 0xA3	; 163
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	20 81       	ld	r18, Z
     e62:	22 23       	and	r18, r18
     e64:	09 f4       	brne	.+2      	; 0xe68 <u8g2_DrawHVLine+0x28>
     e66:	56 c0       	rjmp	.+172    	; 0xf14 <u8g2_DrawHVLine+0xd4>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
     e68:	2b 81       	ldd	r18, Y+3	; 0x03
     e6a:	22 23       	and	r18, r18
     e6c:	09 f4       	brne	.+2      	; 0xe70 <u8g2_DrawHVLine+0x30>
     e6e:	52 c0       	rjmp	.+164    	; 0xf14 <u8g2_DrawHVLine+0xd4>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	78 f0       	brcs	.+30     	; 0xe92 <u8g2_DrawHVLine+0x52>
      {
	if ( dir == 2 )
     e74:	02 30       	cpi	r16, 0x02	; 2
     e76:	31 f4       	brne	.+12     	; 0xe84 <u8g2_DrawHVLine+0x44>
	{
	  x -= len;
     e78:	36 2f       	mov	r19, r22
     e7a:	32 1b       	sub	r19, r18
     e7c:	23 2f       	mov	r18, r19
	  x++;
     e7e:	2f 5f       	subi	r18, 0xFF	; 255
     e80:	29 83       	std	Y+1, r18	; 0x01
     e82:	07 c0       	rjmp	.+14     	; 0xe92 <u8g2_DrawHVLine+0x52>
	}
	else if ( dir == 3 )
     e84:	03 30       	cpi	r16, 0x03	; 3
     e86:	29 f4       	brne	.+10     	; 0xe92 <u8g2_DrawHVLine+0x52>
	{
	  y -= len;
     e88:	3a 81       	ldd	r19, Y+2	; 0x02
     e8a:	32 1b       	sub	r19, r18
     e8c:	23 2f       	mov	r18, r19
	  y++;
     e8e:	2f 5f       	subi	r18, 0xFF	; 255
     e90:	2a 83       	std	Y+2, r18	; 0x02
     e92:	7c 01       	movw	r14, r24
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
     e94:	10 2f       	mov	r17, r16
     e96:	11 70       	andi	r17, 0x01	; 1
     e98:	00 fd       	sbrc	r16, 0
     e9a:	1b c0       	rjmp	.+54     	; 0xed2 <u8g2_DrawHVLine+0x92>
      {
	if ( y < u8g2->user_y0 )
     e9c:	dc 01       	movw	r26, r24
     e9e:	9f 96       	adiw	r26, 0x2f	; 47
     ea0:	9c 91       	ld	r25, X
     ea2:	9f 97       	sbiw	r26, 0x2f	; 47
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	89 17       	cp	r24, r25
     ea8:	a8 f1       	brcs	.+106    	; 0xf14 <u8g2_DrawHVLine+0xd4>
	  return;
	if ( y >= u8g2->user_y1 )
     eaa:	d0 96       	adiw	r26, 0x30	; 48
     eac:	9c 91       	ld	r25, X
     eae:	d0 97       	sbiw	r26, 0x30	; 48
     eb0:	89 17       	cp	r24, r25
     eb2:	80 f5       	brcc	.+96     	; 0xf14 <u8g2_DrawHVLine+0xd4>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
     eb4:	9e 96       	adiw	r26, 0x2e	; 46
     eb6:	2c 91       	ld	r18, X
     eb8:	9e 97       	sbiw	r26, 0x2e	; 46
     eba:	9d 96       	adiw	r26, 0x2d	; 45
     ebc:	4c 91       	ld	r20, X
     ebe:	be 01       	movw	r22, r28
     ec0:	6d 5f       	subi	r22, 0xFD	; 253
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	ce 01       	movw	r24, r28
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	0e 94 f2 06 	call	0xde4	; 0xde4 <u8g2_clip_intersection2>
     ecc:	81 11       	cpse	r24, r1
     ece:	14 c0       	rjmp	.+40     	; 0xef8 <u8g2_DrawHVLine+0xb8>
     ed0:	21 c0       	rjmp	.+66     	; 0xf14 <u8g2_DrawHVLine+0xd4>
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
     ed2:	fc 01       	movw	r30, r24
     ed4:	95 a5       	ldd	r25, Z+45	; 0x2d
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	89 17       	cp	r24, r25
     eda:	e0 f0       	brcs	.+56     	; 0xf14 <u8g2_DrawHVLine+0xd4>
	  return;
	if ( x >= u8g2->user_x1 )
     edc:	96 a5       	ldd	r25, Z+46	; 0x2e
     ede:	89 17       	cp	r24, r25
     ee0:	c8 f4       	brcc	.+50     	; 0xf14 <u8g2_DrawHVLine+0xd4>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
     ee2:	20 a9       	ldd	r18, Z+48	; 0x30
     ee4:	47 a5       	ldd	r20, Z+47	; 0x2f
     ee6:	be 01       	movw	r22, r28
     ee8:	6d 5f       	subi	r22, 0xFD	; 253
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	ce 01       	movw	r24, r28
     eee:	02 96       	adiw	r24, 0x02	; 2
     ef0:	0e 94 f2 06 	call	0xde4	; 0xde4 <u8g2_clip_intersection2>
     ef4:	88 23       	and	r24, r24
     ef6:	71 f0       	breq	.+28     	; 0xf14 <u8g2_DrawHVLine+0xd4>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
     ef8:	d7 01       	movw	r26, r14
     efa:	90 96       	adiw	r26, 0x20	; 32
     efc:	ed 91       	ld	r30, X+
     efe:	fc 91       	ld	r31, X
     f00:	91 97       	sbiw	r26, 0x21	; 33
     f02:	04 80       	ldd	r0, Z+4	; 0x04
     f04:	f5 81       	ldd	r31, Z+5	; 0x05
     f06:	e0 2d       	mov	r30, r0
     f08:	01 2f       	mov	r16, r17
     f0a:	2b 81       	ldd	r18, Y+3	; 0x03
     f0c:	4a 81       	ldd	r20, Y+2	; 0x02
     f0e:	69 81       	ldd	r22, Y+1	; 0x01
     f10:	c7 01       	movw	r24, r14
     f12:	09 95       	icall
    }
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	08 95       	ret

00000f28 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
     f28:	46 17       	cp	r20, r22
     f2a:	30 f4       	brcc	.+12     	; 0xf38 <u8g2_is_intersection_decision_tree+0x10>
  {
    if ( v1 > a0 )	// v1 >= a0
     f2c:	82 17       	cp	r24, r18
     f2e:	50 f0       	brcs	.+20     	; 0xf44 <u8g2_is_intersection_decision_tree+0x1c>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
     f30:	24 17       	cp	r18, r20
     f32:	50 f4       	brcc	.+20     	; 0xf48 <u8g2_is_intersection_decision_tree+0x20>
      {
	return 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
     f38:	82 17       	cp	r24, r18
     f3a:	40 f4       	brcc	.+16     	; 0xf4c <u8g2_is_intersection_decision_tree+0x24>
    {
      if ( v0 > v1 )	// v0 > v1
     f3c:	24 17       	cp	r18, r20
     f3e:	40 f4       	brcc	.+16     	; 0xf50 <u8g2_is_intersection_decision_tree+0x28>
      {
	return 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	08 95       	ret
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	08 95       	ret
      {
	return 1;
      }
      else
      {
	return 0;
     f50:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
      return 0;
    }
  }
}
     f52:	08 95       	ret

00000f54 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	ec 01       	movw	r28, r24
     f60:	16 2f       	mov	r17, r22
     f62:	f2 2e       	mov	r15, r18
     f64:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
     f66:	68 a9       	ldd	r22, Y+48	; 0x30
     f68:	8f a5       	ldd	r24, Y+47	; 0x2f
     f6a:	0e 94 94 07 	call	0xf28	; 0xf28 <u8g2_is_intersection_decision_tree>
     f6e:	88 23       	and	r24, r24
     f70:	31 f0       	breq	.+12     	; 0xf7e <u8g2_IsIntersection+0x2a>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
     f72:	2f 2d       	mov	r18, r15
     f74:	41 2f       	mov	r20, r17
     f76:	6e a5       	ldd	r22, Y+46	; 0x2e
     f78:	8d a5       	ldd	r24, Y+45	; 0x2d
     f7a:	0e 94 94 07 	call	0xf28	; 0xf28 <u8g2_is_intersection_decision_tree>
}
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	08 95       	ret

00000f8a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	dc 01       	movw	r26, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
     f94:	34 2f       	mov	r19, r20
     f96:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	03 2e       	mov	r0, r19
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <u8g2_ll_hvline_vertical_top_lsb+0x1a>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <u8g2_ll_hvline_vertical_top_lsb+0x16>
     fa8:	18 2f       	mov	r17, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
     faa:	fd 01       	movw	r30, r26
     fac:	ed 59       	subi	r30, 0x9D	; 157
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	50 81       	ld	r21, Z
     fb2:	52 30       	cpi	r21, 0x02	; 2
     fb4:	10 f0       	brcs	.+4      	; 0xfba <u8g2_ll_hvline_vertical_top_lsb+0x30>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <u8g2_ll_hvline_vertical_top_lsb+0x32>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
     fba:	78 2f       	mov	r23, r24
  if ( u8g2->draw_color != 1 )
     fbc:	51 30       	cpi	r21, 0x01	; 1
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <u8g2_ll_hvline_vertical_top_lsb+0x38>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
     fc0:	10 e0       	ldi	r17, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
     fc2:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
     fc4:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
     fc6:	ed 91       	ld	r30, X+
     fc8:	fc 91       	ld	r31, X
     fca:	11 97       	sbiw	r26, 0x01	; 1
     fcc:	80 89       	ldd	r24, Z+16	; 0x10
     fce:	84 9f       	mul	r24, r20
     fd0:	f0 01       	movw	r30, r0
     fd2:	85 9f       	mul	r24, r21
     fd4:	f0 0d       	add	r31, r0
     fd6:	11 24       	eor	r1, r1
  ptr = u8g2->tile_buf_ptr;
     fd8:	92 96       	adiw	r26, 0x22	; 34
     fda:	8d 91       	ld	r24, X+
     fdc:	9c 91       	ld	r25, X
     fde:	93 97       	sbiw	r26, 0x23	; 35
  ptr += offset;
  ptr += x;
     fe0:	e6 0f       	add	r30, r22
     fe2:	f1 1d       	adc	r31, r1
     fe4:	e8 0f       	add	r30, r24
     fe6:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
     fe8:	01 11       	cpse	r16, r1
     fea:	07 c0       	rjmp	.+14     	; 0xffa <u8g2_ll_hvline_vertical_top_lsb+0x70>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
     fec:	80 81       	ld	r24, Z
     fee:	87 2b       	or	r24, r23
	*ptr ^= xor_mask;
     ff0:	81 27       	eor	r24, r17
     ff2:	81 93       	st	Z+, r24
	ptr++;
	len--;
     ff4:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
     ff6:	d1 f7       	brne	.-12     	; 0xfec <u8g2_ll_hvline_vertical_top_lsb+0x62>
     ff8:	1e c0       	rjmp	.+60     	; 0x1036 <u8g2_ll_hvline_vertical_top_lsb+0xac>
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
     ffa:	90 81       	ld	r25, Z
     ffc:	97 2b       	or	r25, r23
      *ptr ^= xor_mask;
     ffe:	91 27       	eor	r25, r17
    1000:	90 83       	st	Z, r25
      
      bit_pos++;
    1002:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    1004:	37 70       	andi	r19, 0x07	; 7

      len--;
    1006:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    1008:	31 11       	cpse	r19, r1
    100a:	0f c0       	rjmp	.+30     	; 0x102a <u8g2_ll_hvline_vertical_top_lsb+0xa0>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    100c:	96 96       	adiw	r26, 0x26	; 38
    100e:	8c 91       	ld	r24, X
    1010:	96 97       	sbiw	r26, 0x26	; 38
    1012:	e8 0f       	add	r30, r24
    1014:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    1016:	ed 01       	movw	r28, r26
    1018:	cd 59       	subi	r28, 0x9D	; 157
    101a:	df 4f       	sbci	r29, 0xFF	; 255
    101c:	88 81       	ld	r24, Y
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	08 f4       	brcc	.+2      	; 0x1024 <u8g2_ll_hvline_vertical_top_lsb+0x9a>
	  or_mask  = 1;
    1022:	71 e0       	ldi	r23, 0x01	; 1
	if ( u8g2->draw_color != 1 )
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	21 f4       	brne	.+8      	; 0x1030 <u8g2_ll_hvline_vertical_top_lsb+0xa6>
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <u8g2_ll_hvline_vertical_top_lsb+0xa8>
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    102a:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    102c:	11 0f       	add	r17, r17
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <u8g2_ll_hvline_vertical_top_lsb+0xa8>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    1030:	11 e0       	ldi	r17, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    1032:	21 11       	cpse	r18, r1
    1034:	e2 cf       	rjmp	.-60     	; 0xffa <u8g2_ll_hvline_vertical_top_lsb+0x70>
  }
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    1040:	fc 01       	movw	r30, r24
    1042:	a0 81       	ld	r26, Z
    1044:	b1 81       	ldd	r27, Z+1	; 0x01
    1046:	84 a1       	ldd	r24, Z+36	; 0x24
    1048:	98 2f       	mov	r25, r24
    104a:	99 0f       	add	r25, r25
    104c:	99 0f       	add	r25, r25
    104e:	99 0f       	add	r25, r25
    1050:	97 a3       	std	Z+39, r25	; 0x27
    1052:	50 96       	adiw	r26, 0x10	; 16
    1054:	9c 91       	ld	r25, X
    1056:	50 97       	sbiw	r26, 0x10	; 16
    1058:	90 32       	cpi	r25, 0x20	; 32
    105a:	08 f0       	brcs	.+2      	; 0x105e <u8g2_update_dimension_common+0x1e>
    105c:	9f e1       	ldi	r25, 0x1F	; 31
    105e:	99 0f       	add	r25, r25
    1060:	99 0f       	add	r25, r25
    1062:	99 0f       	add	r25, r25
    1064:	96 a3       	std	Z+38, r25	; 0x26
    1066:	45 a1       	ldd	r20, Z+37	; 0x25
    1068:	94 2f       	mov	r25, r20
    106a:	99 0f       	add	r25, r25
    106c:	99 0f       	add	r25, r25
    106e:	99 0f       	add	r25, r25
    1070:	90 a7       	std	Z+40, r25	; 0x28
    1072:	24 2f       	mov	r18, r20
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	28 0f       	add	r18, r24
    1078:	31 1d       	adc	r19, r1
    107a:	51 96       	adiw	r26, 0x11	; 17
    107c:	5c 91       	ld	r21, X
    107e:	51 97       	sbiw	r26, 0x11	; 17
    1080:	65 2f       	mov	r22, r21
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	62 17       	cp	r22, r18
    1086:	73 07       	cpc	r23, r19
    1088:	14 f4       	brge	.+4      	; 0x108e <u8g2_update_dimension_common+0x4e>
    108a:	85 2f       	mov	r24, r21
    108c:	84 1b       	sub	r24, r20
    108e:	88 0f       	add	r24, r24
    1090:	88 0f       	add	r24, r24
    1092:	88 0f       	add	r24, r24
    1094:	91 a7       	std	Z+41, r25	; 0x29
    1096:	89 0f       	add	r24, r25
    1098:	82 a7       	std	Z+42, r24	; 0x2a
    109a:	80 ef       	ldi	r24, 0xF0	; 240
    109c:	83 a7       	std	Z+43, r24	; 0x2b
    109e:	54 96       	adiw	r26, 0x14	; 20
    10a0:	8d 91       	ld	r24, X+
    10a2:	9c 91       	ld	r25, X
    10a4:	55 97       	sbiw	r26, 0x15	; 21
    10a6:	81 3f       	cpi	r24, 0xF1	; 241
    10a8:	91 05       	cpc	r25, r1
    10aa:	08 f4       	brcc	.+2      	; 0x10ae <u8g2_update_dimension_common+0x6e>
    10ac:	83 a7       	std	Z+43, r24	; 0x2b
    10ae:	56 96       	adiw	r26, 0x16	; 22
    10b0:	8c 91       	ld	r24, X
    10b2:	84 a7       	std	Z+44, r24	; 0x2c
    10b4:	08 95       	ret

000010b6 <u8g2_update_dimension_r0>:
    10b6:	0e 94 20 08 	call	0x1040	; 0x1040 <u8g2_update_dimension_common>
    10ba:	08 95       	ret

000010bc <u8g2_apply_clip_window>:
    10bc:	0f 93       	push	r16
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	ec 01       	movw	r28, r24
    10c4:	0c a9       	ldd	r16, Y+52	; 0x34
    10c6:	2a a9       	ldd	r18, Y+50	; 0x32
    10c8:	4b a9       	ldd	r20, Y+51	; 0x33
    10ca:	69 a9       	ldd	r22, Y+49	; 0x31
    10cc:	0e 94 aa 07 	call	0xf54	; 0xf54 <u8g2_IsIntersection>
    10d0:	81 11       	cpse	r24, r1
    10d2:	04 c0       	rjmp	.+8      	; 0x10dc <u8g2_apply_clip_window+0x20>
    10d4:	c3 5a       	subi	r28, 0xA3	; 163
    10d6:	df 4f       	sbci	r29, 0xFF	; 255
    10d8:	18 82       	st	Y, r1
    10da:	19 c0       	rjmp	.+50     	; 0x110e <u8g2_apply_clip_window+0x52>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	fe 01       	movw	r30, r28
    10e0:	e3 5a       	subi	r30, 0xA3	; 163
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 83       	st	Z, r24
    10e6:	9d a5       	ldd	r25, Y+45	; 0x2d
    10e8:	89 a9       	ldd	r24, Y+49	; 0x31
    10ea:	98 17       	cp	r25, r24
    10ec:	08 f4       	brcc	.+2      	; 0x10f0 <u8g2_apply_clip_window+0x34>
    10ee:	8d a7       	std	Y+45, r24	; 0x2d
    10f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    10f2:	8a a9       	ldd	r24, Y+50	; 0x32
    10f4:	89 17       	cp	r24, r25
    10f6:	08 f4       	brcc	.+2      	; 0x10fa <u8g2_apply_clip_window+0x3e>
    10f8:	8e a7       	std	Y+46, r24	; 0x2e
    10fa:	9f a5       	ldd	r25, Y+47	; 0x2f
    10fc:	8b a9       	ldd	r24, Y+51	; 0x33
    10fe:	98 17       	cp	r25, r24
    1100:	08 f4       	brcc	.+2      	; 0x1104 <u8g2_apply_clip_window+0x48>
    1102:	8f a7       	std	Y+47, r24	; 0x2f
    1104:	98 a9       	ldd	r25, Y+48	; 0x30
    1106:	8c a9       	ldd	r24, Y+52	; 0x34
    1108:	89 17       	cp	r24, r25
    110a:	08 f4       	brcc	.+2      	; 0x110e <u8g2_apply_clip_window+0x52>
    110c:	88 ab       	std	Y+48, r24	; 0x30
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	0f 91       	pop	r16
    1114:	08 95       	ret

00001116 <u8g2_update_page_win_r0>:
    1116:	fc 01       	movw	r30, r24
    1118:	15 a6       	std	Z+45, r1	; 0x2d
    111a:	83 a5       	ldd	r24, Z+43	; 0x2b
    111c:	86 a7       	std	Z+46, r24	; 0x2e
    111e:	81 a5       	ldd	r24, Z+41	; 0x29
    1120:	87 a7       	std	Z+47, r24	; 0x2f
    1122:	82 a5       	ldd	r24, Z+42	; 0x2a
    1124:	80 ab       	std	Z+48, r24	; 0x30
    1126:	cf 01       	movw	r24, r30
    1128:	0e 94 5e 08 	call	0x10bc	; 0x10bc <u8g2_apply_clip_window>
    112c:	08 95       	ret

0000112e <u8g2_draw_l90_r0>:
    112e:	0f 93       	push	r16
    1130:	0e 94 13 07 	call	0xe26	; 0xe26 <u8g2_draw_hv_line_2dir>
    1134:	0f 91       	pop	r16
    1136:	08 95       	ret

00001138 <u8g2_SetMaxClipWindow>:
    1138:	dc 01       	movw	r26, r24
    113a:	d1 96       	adiw	r26, 0x31	; 49
    113c:	1c 92       	st	X, r1
    113e:	d1 97       	sbiw	r26, 0x31	; 49
    1140:	d3 96       	adiw	r26, 0x33	; 51
    1142:	1c 92       	st	X, r1
    1144:	d3 97       	sbiw	r26, 0x33	; 51
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	d2 96       	adiw	r26, 0x32	; 50
    114a:	8c 93       	st	X, r24
    114c:	d2 97       	sbiw	r26, 0x32	; 50
    114e:	d4 96       	adiw	r26, 0x34	; 52
    1150:	8c 93       	st	X, r24
    1152:	d4 97       	sbiw	r26, 0x34	; 52
    1154:	90 96       	adiw	r26, 0x20	; 32
    1156:	ed 91       	ld	r30, X+
    1158:	fc 91       	ld	r31, X
    115a:	91 97       	sbiw	r26, 0x21	; 33
    115c:	02 80       	ldd	r0, Z+2	; 0x02
    115e:	f3 81       	ldd	r31, Z+3	; 0x03
    1160:	e0 2d       	mov	r30, r0
    1162:	cd 01       	movw	r24, r26
    1164:	09 95       	icall
    1166:	08 95       	ret

00001168 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    1172:	1e aa       	std	Y+54, r1	; 0x36
    1174:	1d aa       	std	Y+53, r1	; 0x35
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    1176:	3f 8f       	std	Y+31, r19	; 0x1f
    1178:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    117a:	7b a3       	std	Y+35, r23	; 0x23
    117c:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    117e:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    1180:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    1182:	fc 01       	movw	r30, r24
    1184:	ee 5b       	subi	r30, 0xBE	; 190
    1186:	ff 4f       	sbci	r31, 0xFF	; 255
    1188:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    118a:	b0 96       	adiw	r30, 0x20	; 32
    118c:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    1194:	31 96       	adiw	r30, 0x01	; 1
    1196:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    1198:	19 a3       	std	Y+33, r17	; 0x21
    119a:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    119c:	d8 01       	movw	r26, r16
    119e:	ed 91       	ld	r30, X+
    11a0:	fc 91       	ld	r31, X
    11a2:	ce 01       	movw	r24, r28
    11a4:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    11a6:	ce 01       	movw	r24, r28
    11a8:	0e 94 9c 08 	call	0x1138	; 0x1138 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    11ac:	ce 01       	movw	r24, r28
    11ae:	0e 94 d1 06 	call	0xda2	; 0xda2 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    11b2:	cb 5b       	subi	r28, 0xBB	; 187
    11b4:	df 4f       	sbci	r29, 0xFF	; 255
    11b6:	18 82       	st	Y, r1
#endif
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	08 95       	ret

000011c2 <u8x8_ascii_next>:
      tile++;
      xx++;
    } while( xx < th );
    y+=2;
  } while( y < tv );  
}
    11c2:	66 23       	and	r22, r22
    11c4:	29 f0       	breq	.+10     	; 0x11d0 <u8x8_ascii_next+0xe>
    11c6:	6a 30       	cpi	r22, 0x0A	; 10
    11c8:	31 f0       	breq	.+12     	; 0x11d6 <u8x8_ascii_next+0x14>
    11ca:	86 2f       	mov	r24, r22
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	08 95       	ret
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	08 95       	ret
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	9f ef       	ldi	r25, 0xFF	; 255
    11da:	08 95       	ret

000011dc <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    11dc:	fc 01       	movw	r30, r24
    11de:	10 8e       	std	Z+24, r1	; 0x18
    11e0:	08 95       	ret

000011e2 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    11e2:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    11e4:	dc 01       	movw	r26, r24
    11e6:	18 96       	adiw	r26, 0x08	; 8
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	19 97       	sbiw	r26, 0x09	; 9
    11ee:	46 2f       	mov	r20, r22
    11f0:	67 e1       	ldi	r22, 0x17	; 23
    11f2:	09 95       	icall
}
    11f4:	08 95       	ret

000011f6 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	1f 92       	push	r1
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    1202:	ae 01       	movw	r20, r28
    1204:	4f 5f       	subi	r20, 0xFF	; 255
    1206:	5f 4f       	sbci	r21, 0xFF	; 255
    1208:	61 e0       	ldi	r22, 0x01	; 1
    120a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <u8x8_byte_SendBytes>
}
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    1216:	dc 01       	movw	r26, r24
    1218:	18 96       	adiw	r26, 0x08	; 8
    121a:	ed 91       	ld	r30, X+
    121c:	fc 91       	ld	r31, X
    121e:	19 97       	sbiw	r26, 0x09	; 9
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	68 e1       	ldi	r22, 0x18	; 24
    1228:	09 95       	icall
}
    122a:	08 95       	ret

0000122c <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    122c:	dc 01       	movw	r26, r24
    122e:	18 96       	adiw	r26, 0x08	; 8
    1230:	ed 91       	ld	r30, X+
    1232:	fc 91       	ld	r31, X
    1234:	19 97       	sbiw	r26, 0x09	; 9
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	69 e1       	ldi	r22, 0x19	; 25
    123e:	09 95       	icall
}
    1240:	08 95       	ret

00001242 <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	ec 01       	movw	r28, r24
    124e:	16 2f       	mov	r17, r22
    1250:	7a 01       	movw	r14, r20
    1252:	0e 94 0b 09 	call	0x1216	; 0x1216 <u8x8_byte_StartTransfer>
    1256:	60 e4       	ldi	r22, 0x40	; 64
    1258:	ce 01       	movw	r24, r28
    125a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <u8x8_byte_SendByte>
    125e:	e8 85       	ldd	r30, Y+8	; 0x08
    1260:	f9 85       	ldd	r31, Y+9	; 0x09
    1262:	97 01       	movw	r18, r14
    1264:	41 2f       	mov	r20, r17
    1266:	67 e1       	ldi	r22, 0x17	; 23
    1268:	ce 01       	movw	r24, r28
    126a:	09 95       	icall
    126c:	ce 01       	movw	r24, r28
    126e:	0e 94 16 09 	call	0x122c	; 0x122c <u8x8_byte_EndTransfer>
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	ff 90       	pop	r15
    127a:	ef 90       	pop	r14
    127c:	08 95       	ret

0000127e <u8x8_cad_SendCmd>:
    127e:	46 2f       	mov	r20, r22
    1280:	dc 01       	movw	r26, r24
    1282:	16 96       	adiw	r26, 0x06	; 6
    1284:	ed 91       	ld	r30, X+
    1286:	fc 91       	ld	r31, X
    1288:	17 97       	sbiw	r26, 0x07	; 7
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	65 e1       	ldi	r22, 0x15	; 21
    1290:	09 95       	icall
    1292:	08 95       	ret

00001294 <u8x8_cad_SendArg>:
    1294:	46 2f       	mov	r20, r22
    1296:	dc 01       	movw	r26, r24
    1298:	16 96       	adiw	r26, 0x06	; 6
    129a:	ed 91       	ld	r30, X+
    129c:	fc 91       	ld	r31, X
    129e:	17 97       	sbiw	r26, 0x07	; 7
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	66 e1       	ldi	r22, 0x16	; 22
    12a6:	09 95       	icall
    12a8:	08 95       	ret

000012aa <u8x8_cad_SendData>:
    12aa:	9a 01       	movw	r18, r20
    12ac:	dc 01       	movw	r26, r24
    12ae:	16 96       	adiw	r26, 0x06	; 6
    12b0:	ed 91       	ld	r30, X+
    12b2:	fc 91       	ld	r31, X
    12b4:	17 97       	sbiw	r26, 0x07	; 7
    12b6:	46 2f       	mov	r20, r22
    12b8:	67 e1       	ldi	r22, 0x17	; 23
    12ba:	09 95       	icall
    12bc:	08 95       	ret

000012be <u8x8_cad_StartTransfer>:
    12be:	dc 01       	movw	r26, r24
    12c0:	16 96       	adiw	r26, 0x06	; 6
    12c2:	ed 91       	ld	r30, X+
    12c4:	fc 91       	ld	r31, X
    12c6:	17 97       	sbiw	r26, 0x07	; 7
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	68 e1       	ldi	r22, 0x18	; 24
    12d0:	09 95       	icall
    12d2:	08 95       	ret

000012d4 <u8x8_cad_EndTransfer>:
    12d4:	dc 01       	movw	r26, r24
    12d6:	16 96       	adiw	r26, 0x06	; 6
    12d8:	ed 91       	ld	r30, X+
    12da:	fc 91       	ld	r31, X
    12dc:	17 97       	sbiw	r26, 0x07	; 7
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	69 e1       	ldi	r22, 0x19	; 25
    12e6:	09 95       	icall
    12e8:	08 95       	ret

000012ea <u8x8_cad_SendSequence>:
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	1f 92       	push	r1
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	7c 01       	movw	r14, r24
    12fe:	8b 01       	movw	r16, r22
    1300:	d8 01       	movw	r26, r16
    1302:	6d 91       	ld	r22, X+
    1304:	8d 01       	movw	r16, r26
    1306:	67 31       	cpi	r22, 0x17	; 23
    1308:	b9 f0       	breq	.+46     	; 0x1338 <u8x8_cad_SendSequence+0x4e>
    130a:	18 f4       	brcc	.+6      	; 0x1312 <u8x8_cad_SendSequence+0x28>
    130c:	65 31       	cpi	r22, 0x15	; 21
    130e:	30 f4       	brcc	.+12     	; 0x131c <u8x8_cad_SendSequence+0x32>
    1310:	33 c0       	rjmp	.+102    	; 0x1378 <u8x8_cad_SendSequence+0x8e>
    1312:	6a 31       	cpi	r22, 0x1A	; 26
    1314:	e8 f0       	brcs	.+58     	; 0x1350 <u8x8_cad_SendSequence+0x66>
    1316:	6e 3f       	cpi	r22, 0xFE	; 254
    1318:	31 f1       	breq	.+76     	; 0x1366 <u8x8_cad_SendSequence+0x7c>
    131a:	2e c0       	rjmp	.+92     	; 0x1378 <u8x8_cad_SendSequence+0x8e>
    131c:	fd 01       	movw	r30, r26
    131e:	41 91       	ld	r20, Z+
    1320:	8f 01       	movw	r16, r30
    1322:	49 83       	std	Y+1, r20	; 0x01
    1324:	d7 01       	movw	r26, r14
    1326:	16 96       	adiw	r26, 0x06	; 6
    1328:	ed 91       	ld	r30, X+
    132a:	fc 91       	ld	r31, X
    132c:	17 97       	sbiw	r26, 0x07	; 7
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	c7 01       	movw	r24, r14
    1334:	09 95       	icall
    1336:	e4 cf       	rjmp	.-56     	; 0x1300 <u8x8_cad_SendSequence+0x16>
    1338:	fd 01       	movw	r30, r26
    133a:	81 91       	ld	r24, Z+
    133c:	8f 01       	movw	r16, r30
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	ae 01       	movw	r20, r28
    1342:	4f 5f       	subi	r20, 0xFF	; 255
    1344:	5f 4f       	sbci	r21, 0xFF	; 255
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	c7 01       	movw	r24, r14
    134a:	0e 94 55 09 	call	0x12aa	; 0x12aa <u8x8_cad_SendData>
    134e:	d8 cf       	rjmp	.-80     	; 0x1300 <u8x8_cad_SendSequence+0x16>
    1350:	d7 01       	movw	r26, r14
    1352:	16 96       	adiw	r26, 0x06	; 6
    1354:	ed 91       	ld	r30, X+
    1356:	fc 91       	ld	r31, X
    1358:	17 97       	sbiw	r26, 0x07	; 7
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	c7 01       	movw	r24, r14
    1362:	09 95       	icall
    1364:	cd cf       	rjmp	.-102    	; 0x1300 <u8x8_cad_SendSequence+0x16>
    1366:	fd 01       	movw	r30, r26
    1368:	41 91       	ld	r20, Z+
    136a:	8f 01       	movw	r16, r30
    136c:	49 83       	std	Y+1, r20	; 0x01
    136e:	69 e2       	ldi	r22, 0x29	; 41
    1370:	c7 01       	movw	r24, r14
    1372:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <u8x8_gpio_call>
    1376:	c4 cf       	rjmp	.-120    	; 0x1300 <u8x8_cad_SendSequence+0x16>
    1378:	0f 90       	pop	r0
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	08 95       	ret

00001388 <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	7c 01       	movw	r14, r24
    1394:	c4 2f       	mov	r28, r20
    1396:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    1398:	66 31       	cpi	r22, 0x16	; 22
    139a:	29 f1       	breq	.+74     	; 0x13e6 <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    139c:	30 f4       	brcc	.+12     	; 0x13aa <u8x8_cad_ssd13xx_fast_i2c+0x22>
    139e:	64 31       	cpi	r22, 0x14	; 20
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    13a2:	41 c0       	rjmp	.+130    	; 0x1426 <u8x8_cad_ssd13xx_fast_i2c+0x9e>
    13a4:	65 31       	cpi	r22, 0x15	; 21
    13a6:	49 f0       	breq	.+18     	; 0x13ba <u8x8_cad_ssd13xx_fast_i2c+0x32>
    13a8:	60 c0       	rjmp	.+192    	; 0x146a <u8x8_cad_ssd13xx_fast_i2c+0xe2>
    13aa:	68 31       	cpi	r22, 0x18	; 24
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <u8x8_cad_ssd13xx_fast_i2c+0x28>
    13ae:	4e c0       	rjmp	.+156    	; 0x144c <u8x8_cad_ssd13xx_fast_i2c+0xc4>
    13b0:	f8 f0       	brcs	.+62     	; 0x13f0 <u8x8_cad_ssd13xx_fast_i2c+0x68>
    13b2:	69 31       	cpi	r22, 0x19	; 25
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <u8x8_cad_ssd13xx_fast_i2c+0x30>
    13b6:	4e c0       	rjmp	.+156    	; 0x1454 <u8x8_cad_ssd13xx_fast_i2c+0xcc>
    13b8:	58 c0       	rjmp	.+176    	; 0x146a <u8x8_cad_ssd13xx_fast_i2c+0xe2>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    13ba:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <in_transfer.3523>
    13be:	88 23       	and	r24, r24
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    13c2:	c7 01       	movw	r24, r14
    13c4:	0e 94 16 09 	call	0x122c	; 0x122c <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    13c8:	c7 01       	movw	r24, r14
    13ca:	0e 94 0b 09 	call	0x1216	; 0x1216 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	c7 01       	movw	r24, r14
    13d2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    13d6:	6c 2f       	mov	r22, r28
    13d8:	c7 01       	movw	r24, r14
    13da:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <u8x8_byte_SendByte>
      in_transfer = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <in_transfer.3523>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    13e4:	43 c0       	rjmp	.+134    	; 0x146c <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    13e6:	64 2f       	mov	r22, r20
    13e8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    13ee:	3e c0       	rjmp	.+124    	; 0x146c <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    13f0:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <in_transfer.3523>
    13f4:	88 23       	and	r24, r24
    13f6:	61 f0       	breq	.+24     	; 0x1410 <u8x8_cad_ssd13xx_fast_i2c+0x88>
	u8x8_byte_EndTransfer(u8x8); 
    13f8:	c7 01       	movw	r24, r14
    13fa:	0e 94 16 09 	call	0x122c	; 0x122c <u8x8_byte_EndTransfer>
    13fe:	08 c0       	rjmp	.+16     	; 0x1410 <u8x8_cad_ssd13xx_fast_i2c+0x88>
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    1400:	a8 01       	movw	r20, r16
    1402:	68 e1       	ldi	r22, 0x18	; 24
    1404:	c7 01       	movw	r24, r14
    1406:	0e 94 21 09 	call	0x1242	; 0x1242 <u8x8_i2c_data_transfer>
	arg_int-=24;
    140a:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    140c:	08 5e       	subi	r16, 0xE8	; 232
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    1410:	c9 31       	cpi	r28, 0x19	; 25
    1412:	b0 f7       	brcc	.-20     	; 0x1400 <u8x8_cad_ssd13xx_fast_i2c+0x78>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    1414:	a8 01       	movw	r20, r16
    1416:	6c 2f       	mov	r22, r28
    1418:	c7 01       	movw	r24, r14
    141a:	0e 94 21 09 	call	0x1242	; 0x1242 <u8x8_i2c_data_transfer>
      in_transfer = 0;
    141e:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <in_transfer.3523>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    1424:	23 c0       	rjmp	.+70     	; 0x146c <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    1426:	dc 01       	movw	r26, r24
    1428:	56 96       	adiw	r26, 0x16	; 22
    142a:	8c 91       	ld	r24, X
    142c:	56 97       	sbiw	r26, 0x16	; 22
    142e:	8f 3f       	cpi	r24, 0xFF	; 255
    1430:	19 f4       	brne	.+6      	; 0x1438 <u8x8_cad_ssd13xx_fast_i2c+0xb0>
	u8x8->i2c_address = 0x078;
    1432:	88 e7       	ldi	r24, 0x78	; 120
    1434:	56 96       	adiw	r26, 0x16	; 22
    1436:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    1438:	d7 01       	movw	r26, r14
    143a:	18 96       	adiw	r26, 0x08	; 8
    143c:	ed 91       	ld	r30, X+
    143e:	fc 91       	ld	r31, X
    1440:	19 97       	sbiw	r26, 0x09	; 9
    1442:	98 01       	movw	r18, r16
    1444:	4c 2f       	mov	r20, r28
    1446:	c7 01       	movw	r24, r14
    1448:	09 95       	icall
    144a:	10 c0       	rjmp	.+32     	; 0x146c <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    144c:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <in_transfer.3523>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    1450:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    1452:	0c c0       	rjmp	.+24     	; 0x146c <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    1454:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <in_transfer.3523>
    1458:	88 23       	and	r24, r24
    145a:	19 f0       	breq	.+6      	; 0x1462 <u8x8_cad_ssd13xx_fast_i2c+0xda>
	u8x8_byte_EndTransfer(u8x8); 
    145c:	c7 01       	movw	r24, r14
    145e:	0e 94 16 09 	call	0x122c	; 0x122c <u8x8_byte_EndTransfer>
      in_transfer = 0;
    1462:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <in_transfer.3523>
      break;
    default:
      return 0;
  }
  return 1;
    1466:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    1468:	01 c0       	rjmp	.+2      	; 0x146c <u8x8_cad_ssd13xx_fast_i2c+0xe4>
    default:
      return 0;
    146a:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	08 95       	ret

00001478 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    1478:	fc 01       	movw	r30, r24
    147a:	71 83       	std	Z+1, r23	; 0x01
    147c:	60 83       	st	Z, r22
    147e:	fb 01       	movw	r30, r22
    1480:	22 89       	ldd	r18, Z+18	; 0x12
    1482:	fc 01       	movw	r30, r24
    1484:	24 8b       	std	Z+20, r18	; 0x14
    1486:	08 95       	ret

00001488 <u8x8_d_helper_display_init>:
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
    148e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1490:	fb 85       	ldd	r31, Y+11	; 0x0b
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	68 e2       	ldi	r22, 0x28	; 40
    149a:	09 95       	icall
    149c:	ee 81       	ldd	r30, Y+6	; 0x06
    149e:	ff 81       	ldd	r31, Y+7	; 0x07
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	64 e1       	ldi	r22, 0x14	; 20
    14a8:	ce 01       	movw	r24, r28
    14aa:	09 95       	icall
    14ac:	41 e0       	ldi	r20, 0x01	; 1
    14ae:	6b e4       	ldi	r22, 0x4B	; 75
    14b0:	ce 01       	movw	r24, r28
    14b2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <u8x8_gpio_call>
    14b6:	e8 81       	ld	r30, Y
    14b8:	f9 81       	ldd	r31, Y+1	; 0x01
    14ba:	44 81       	ldd	r20, Z+4	; 0x04
    14bc:	69 e2       	ldi	r22, 0x29	; 41
    14be:	ce 01       	movw	r24, r28
    14c0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <u8x8_gpio_call>
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	6b e4       	ldi	r22, 0x4B	; 75
    14c8:	ce 01       	movw	r24, r28
    14ca:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <u8x8_gpio_call>
    14ce:	e8 81       	ld	r30, Y
    14d0:	f9 81       	ldd	r31, Y+1	; 0x01
    14d2:	44 81       	ldd	r20, Z+4	; 0x04
    14d4:	69 e2       	ldi	r22, 0x29	; 41
    14d6:	ce 01       	movw	r24, r28
    14d8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <u8x8_gpio_call>
    14dc:	41 e0       	ldi	r20, 0x01	; 1
    14de:	6b e4       	ldi	r22, 0x4B	; 75
    14e0:	ce 01       	movw	r24, r28
    14e2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <u8x8_gpio_call>
    14e6:	e8 81       	ld	r30, Y
    14e8:	f9 81       	ldd	r31, Y+1	; 0x01
    14ea:	45 81       	ldd	r20, Z+5	; 0x05
    14ec:	69 e2       	ldi	r22, 0x29	; 41
    14ee:	ce 01       	movw	r24, r28
    14f0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <u8x8_gpio_call>
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <u8x8_DrawTile>:
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	00 d0       	rcall	.+0      	; 0x1504 <u8x8_DrawTile+0xa>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <u8x8_DrawTile+0xc>
    1506:	1f 92       	push	r1
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	6c 83       	std	Y+4, r22	; 0x04
    150e:	4d 83       	std	Y+5, r20	; 0x05
    1510:	2b 83       	std	Y+3, r18	; 0x03
    1512:	1a 83       	std	Y+2, r17	; 0x02
    1514:	09 83       	std	Y+1, r16	; 0x01
    1516:	dc 01       	movw	r26, r24
    1518:	14 96       	adiw	r26, 0x04	; 4
    151a:	ed 91       	ld	r30, X+
    151c:	fc 91       	ld	r31, X
    151e:	15 97       	sbiw	r26, 0x05	; 5
    1520:	9e 01       	movw	r18, r28
    1522:	2f 5f       	subi	r18, 0xFF	; 255
    1524:	3f 4f       	sbci	r19, 0xFF	; 255
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	6f e0       	ldi	r22, 0x0F	; 15
    152a:	09 95       	icall
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	08 95       	ret

00001540 <u8x8_SetupMemory>:
    1540:	dc 01       	movw	r26, r24
    1542:	14 96       	adiw	r26, 0x04	; 4
    1544:	ed 91       	ld	r30, X+
    1546:	fc 91       	ld	r31, X
    1548:	15 97       	sbiw	r26, 0x05	; 5
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e0       	ldi	r20, 0x00	; 0
    1550:	69 e0       	ldi	r22, 0x09	; 9
    1552:	09 95       	icall
    1554:	08 95       	ret

00001556 <u8x8_InitDisplay>:
    1556:	dc 01       	movw	r26, r24
    1558:	14 96       	adiw	r26, 0x04	; 4
    155a:	ed 91       	ld	r30, X+
    155c:	fc 91       	ld	r31, X
    155e:	15 97       	sbiw	r26, 0x05	; 5
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	6a e0       	ldi	r22, 0x0A	; 10
    1568:	09 95       	icall
    156a:	08 95       	ret

0000156c <u8x8_SetPowerSave>:
    156c:	46 2f       	mov	r20, r22
    156e:	dc 01       	movw	r26, r24
    1570:	14 96       	adiw	r26, 0x04	; 4
    1572:	ed 91       	ld	r30, X+
    1574:	fc 91       	ld	r31, X
    1576:	15 97       	sbiw	r26, 0x05	; 5
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	6b e0       	ldi	r22, 0x0B	; 11
    157e:	09 95       	icall
    1580:	08 95       	ret

00001582 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    1582:	dc 01       	movw	r26, r24
    1584:	14 96       	adiw	r26, 0x04	; 4
    1586:	ed 91       	ld	r30, X+
    1588:	fc 91       	ld	r31, X
    158a:	15 97       	sbiw	r26, 0x05	; 5
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e0       	ldi	r20, 0x00	; 0
    1592:	60 e1       	ldi	r22, 0x10	; 16
    1594:	09 95       	icall
    1596:	08 95       	ret

00001598 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	8c 01       	movw	r16, r24
    15a6:	c4 2f       	mov	r28, r20
    15a8:	79 01       	movw	r14, r18
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    15aa:	6d 30       	cpi	r22, 0x0D	; 13
    15ac:	b9 f0       	breq	.+46     	; 0x15dc <u8x8_d_ssd1306_sh1106_generic+0x44>
    15ae:	18 f4       	brcc	.+6      	; 0x15b6 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    15b0:	6b 30       	cpi	r22, 0x0B	; 11
    15b2:	31 f0       	breq	.+12     	; 0x15c0 <u8x8_d_ssd1306_sh1106_generic+0x28>
    15b4:	72 c0       	rjmp	.+228    	; 0x169a <u8x8_d_ssd1306_sh1106_generic+0x102>
    15b6:	6e 30       	cpi	r22, 0x0E	; 14
    15b8:	69 f1       	breq	.+90     	; 0x1614 <u8x8_d_ssd1306_sh1106_generic+0x7c>
    15ba:	6f 30       	cpi	r22, 0x0F	; 15
    15bc:	d1 f1       	breq	.+116    	; 0x1632 <u8x8_d_ssd1306_sh1106_generic+0x9a>
    15be:	6d c0       	rjmp	.+218    	; 0x169a <u8x8_d_ssd1306_sh1106_generic+0x102>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    15c0:	41 11       	cpse	r20, r1
    15c2:	06 c0       	rjmp	.+12     	; 0x15d0 <u8x8_d_ssd1306_sh1106_generic+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    15c4:	63 e3       	ldi	r22, 0x33	; 51
    15c6:	71 e0       	ldi	r23, 0x01	; 1
    15c8:	0e 94 75 09 	call	0x12ea	; 0x12ea <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	66 c0       	rjmp	.+204    	; 0x169c <u8x8_d_ssd1306_sh1106_generic+0x104>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    15d0:	6e e2       	ldi	r22, 0x2E	; 46
    15d2:	71 e0       	ldi	r23, 0x01	; 1
    15d4:	0e 94 75 09 	call	0x12ea	; 0x12ea <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	60 c0       	rjmp	.+192    	; 0x169c <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    15dc:	41 11       	cpse	r20, r1
    15de:	0d c0       	rjmp	.+26     	; 0x15fa <u8x8_d_ssd1306_sh1106_generic+0x62>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    15e0:	67 e2       	ldi	r22, 0x27	; 39
    15e2:	71 e0       	ldi	r23, 0x01	; 1
    15e4:	0e 94 75 09 	call	0x12ea	; 0x12ea <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    15e8:	d8 01       	movw	r26, r16
    15ea:	ed 91       	ld	r30, X+
    15ec:	fc 91       	ld	r31, X
    15ee:	11 97       	sbiw	r26, 0x01	; 1
    15f0:	82 89       	ldd	r24, Z+18	; 0x12
    15f2:	54 96       	adiw	r26, 0x14	; 20
    15f4:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	51 c0       	rjmp	.+162    	; 0x169c <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    15fa:	60 e2       	ldi	r22, 0x20	; 32
    15fc:	71 e0       	ldi	r23, 0x01	; 1
    15fe:	0e 94 75 09 	call	0x12ea	; 0x12ea <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    1602:	d8 01       	movw	r26, r16
    1604:	ed 91       	ld	r30, X+
    1606:	fc 91       	ld	r31, X
    1608:	11 97       	sbiw	r26, 0x01	; 1
    160a:	83 89       	ldd	r24, Z+19	; 0x13
    160c:	54 96       	adiw	r26, 0x14	; 20
    160e:	8c 93       	st	X, r24
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	44 c0       	rjmp	.+136    	; 0x169c <u8x8_d_ssd1306_sh1106_generic+0x104>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    1614:	0e 94 5f 09 	call	0x12be	; 0x12be <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    1618:	61 e8       	ldi	r22, 0x81	; 129
    161a:	c8 01       	movw	r24, r16
    161c:	0e 94 3f 09 	call	0x127e	; 0x127e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    1620:	6c 2f       	mov	r22, r28
    1622:	c8 01       	movw	r24, r16
    1624:	0e 94 4a 09 	call	0x1294	; 0x1294 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    1628:	c8 01       	movw	r24, r16
    162a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    1630:	35 c0       	rjmp	.+106    	; 0x169c <u8x8_d_ssd1306_sh1106_generic+0x104>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    1632:	0e 94 5f 09 	call	0x12be	; 0x12be <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    1636:	f7 01       	movw	r30, r14
    1638:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    163a:	dd 0f       	add	r29, r29
    163c:	dd 0f       	add	r29, r29
    163e:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    1640:	d8 01       	movw	r26, r16
    1642:	54 96       	adiw	r26, 0x14	; 20
    1644:	8c 91       	ld	r24, X
    1646:	d8 0f       	add	r29, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    1648:	60 e4       	ldi	r22, 0x40	; 64
    164a:	c8 01       	movw	r24, r16
    164c:	0e 94 3f 09 	call	0x127e	; 0x127e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    1650:	6d 2f       	mov	r22, r29
    1652:	62 95       	swap	r22
    1654:	6f 70       	andi	r22, 0x0F	; 15
    1656:	60 61       	ori	r22, 0x10	; 16
    1658:	c8 01       	movw	r24, r16
    165a:	0e 94 3f 09 	call	0x127e	; 0x127e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    165e:	6d 2f       	mov	r22, r29
    1660:	6f 70       	andi	r22, 0x0F	; 15
    1662:	c8 01       	movw	r24, r16
    1664:	0e 94 4a 09 	call	0x1294	; 0x1294 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    1668:	f7 01       	movw	r30, r14
    166a:	64 81       	ldd	r22, Z+4	; 0x04
    166c:	60 6b       	ori	r22, 0xB0	; 176
    166e:	c8 01       	movw	r24, r16
    1670:	0e 94 4a 09 	call	0x1294	; 0x1294 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
    1674:	d7 01       	movw	r26, r14
    1676:	12 96       	adiw	r26, 0x02	; 2
    1678:	6c 91       	ld	r22, X
    167a:	12 97       	sbiw	r26, 0x02	; 2
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
    167c:	4d 91       	ld	r20, X+
    167e:	5c 91       	ld	r21, X
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    1680:	66 0f       	add	r22, r22
    1682:	66 0f       	add	r22, r22
    1684:	66 0f       	add	r22, r22
    1686:	c8 01       	movw	r24, r16
    1688:	0e 94 55 09 	call	0x12aa	; 0x12aa <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    168c:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    168e:	91 f7       	brne	.-28     	; 0x1674 <u8x8_d_ssd1306_sh1106_generic+0xdc>
      
      u8x8_cad_EndTransfer(u8x8);
    1690:	c8 01       	movw	r24, r16
    1692:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    1696:	81 e0       	ldi	r24, 0x01	; 1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    1698:	01 c0       	rjmp	.+2      	; 0x169c <u8x8_d_ssd1306_sh1106_generic+0x104>
    default:
      return 0;
    169a:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	08 95       	ret

000016aa <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	8c 01       	movw	r16, r24
    16b2:	c6 2f       	mov	r28, r22
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    16b4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <u8x8_d_ssd1306_sh1106_generic>
    16b8:	81 11       	cpse	r24, r1
    16ba:	15 c0       	rjmp	.+42     	; 0x16e6 <u8x8_d_ssd1306_128x64_noname+0x3c>
    return 1;
  
  switch(msg)
    16bc:	c9 30       	cpi	r28, 0x09	; 9
    16be:	61 f0       	breq	.+24     	; 0x16d8 <u8x8_d_ssd1306_128x64_noname+0x2e>
    16c0:	ca 30       	cpi	r28, 0x0A	; 10
    16c2:	91 f4       	brne	.+36     	; 0x16e8 <u8x8_d_ssd1306_128x64_noname+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    16c4:	c8 01       	movw	r24, r16
    16c6:	0e 94 44 0a 	call	0x1488	; 0x1488 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    16ca:	68 e3       	ldi	r22, 0x38	; 56
    16cc:	71 e0       	ldi	r23, 0x01	; 1
    16ce:	c8 01       	movw	r24, r16
    16d0:	0e 94 75 09 	call	0x12ea	; 0x12ea <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    16d6:	08 c0       	rjmp	.+16     	; 0x16e8 <u8x8_d_ssd1306_128x64_noname+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    16d8:	68 e0       	ldi	r22, 0x08	; 8
    16da:	71 e0       	ldi	r23, 0x01	; 1
    16dc:	c8 01       	movw	r24, r16
    16de:	0e 94 3c 0a 	call	0x1478	; 0x1478 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <u8x8_d_ssd1306_128x64_noname+0x3e>

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
      break;
    default:
      return 0;
  }
  return 1;
}
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	08 95       	ret

000016f0 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    16f0:	dc 01       	movw	r26, r24
    16f2:	1a 96       	adiw	r26, 0x0a	; 10
    16f4:	ed 91       	ld	r30, X+
    16f6:	fc 91       	ld	r31, X
    16f8:	1b 97       	sbiw	r26, 0x0b	; 11
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	09 95       	icall
    1700:	08 95       	ret

00001702 <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	08 95       	ret

00001706 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    1706:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    1708:	11 82       	std	Z+1, r1	; 0x01
    170a:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    170c:	81 e8       	ldi	r24, 0x81	; 129
    170e:	9b e0       	ldi	r25, 0x0B	; 11
    1710:	95 83       	std	Z+5, r25	; 0x05
    1712:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    1714:	97 83       	std	Z+7, r25	; 0x07
    1716:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    1718:	91 87       	std	Z+9, r25	; 0x09
    171a:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    171c:	93 87       	std	Z+11, r25	; 0x0b
    171e:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    1720:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    1722:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    1724:	14 86       	std	Z+12, r1	; 0x0c
    1726:	15 86       	std	Z+13, r1	; 0x0d
    1728:	16 86       	std	Z+14, r1	; 0x0e
    172a:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1730:	82 8f       	std	Z+26, r24	; 0x1a
    1732:	08 95       	ret

00001734 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1734:	af 92       	push	r10
    1736:	bf 92       	push	r11
    1738:	cf 92       	push	r12
    173a:	df 92       	push	r13
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	ec 01       	movw	r28, r24
    174a:	5b 01       	movw	r10, r22
    174c:	6a 01       	movw	r12, r20
    174e:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    1750:	0e 94 83 0b 	call	0x1706	; 0x1706 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    1754:	bd 82       	std	Y+5, r11	; 0x05
    1756:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    1758:	df 82       	std	Y+7, r13	; 0x07
    175a:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    175c:	f9 86       	std	Y+9, r15	; 0x09
    175e:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    1760:	1b 87       	std	Y+11, r17	; 0x0b
    1762:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    1764:	ce 01       	movw	r24, r28
    1766:	0e 94 a0 0a 	call	0x1540	; 0x1540 <u8x8_SetupMemory>
}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	08 95       	ret

00001780 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    1780:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1784:	88 e4       	ldi	r24, 0x48	; 72
    1786:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    178a:	08 95       	ret

0000178c <i2c_start_wait>:
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	94 ea       	ldi	r25, 0xA4	; 164
    1792:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1796:	4f ef       	ldi	r20, 0xFF	; 255
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <i2c_start_wait+0x18>
    17a0:	b9 01       	movw	r22, r18
    17a2:	a8 01       	movw	r20, r16
    17a4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    17a8:	99 23       	and	r25, r25
    17aa:	54 f0       	brlt	.+20     	; 0x17c0 <i2c_start_wait+0x34>
    17ac:	8a 01       	movw	r16, r20
    17ae:	9b 01       	movw	r18, r22
    17b0:	01 50       	subi	r16, 0x01	; 1
    17b2:	11 09       	sbc	r17, r1
    17b4:	21 09       	sbc	r18, r1
    17b6:	31 09       	sbc	r19, r1
    17b8:	45 2b       	or	r20, r21
    17ba:	46 2b       	or	r20, r22
    17bc:	47 2b       	or	r20, r23
    17be:	81 f7       	brne	.-32     	; 0x17a0 <i2c_start_wait+0x14>
    17c0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    17c4:	98 7f       	andi	r25, 0xF8	; 248
    17c6:	98 30       	cpi	r25, 0x08	; 8
    17c8:	11 f0       	breq	.+4      	; 0x17ce <i2c_start_wait+0x42>
    17ca:	90 31       	cpi	r25, 0x10	; 16
    17cc:	09 f7       	brne	.-62     	; 0x1790 <i2c_start_wait+0x4>
    17ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    17d2:	94 e8       	ldi	r25, 0x84	; 132
    17d4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    17d8:	4f ef       	ldi	r20, 0xFF	; 255
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <i2c_start_wait+0x5a>
    17e2:	b9 01       	movw	r22, r18
    17e4:	a8 01       	movw	r20, r16
    17e6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    17ea:	99 23       	and	r25, r25
    17ec:	54 f0       	brlt	.+20     	; 0x1802 <i2c_start_wait+0x76>
    17ee:	8a 01       	movw	r16, r20
    17f0:	9b 01       	movw	r18, r22
    17f2:	01 50       	subi	r16, 0x01	; 1
    17f4:	11 09       	sbc	r17, r1
    17f6:	21 09       	sbc	r18, r1
    17f8:	31 09       	sbc	r19, r1
    17fa:	45 2b       	or	r20, r21
    17fc:	46 2b       	or	r20, r22
    17fe:	47 2b       	or	r20, r23
    1800:	81 f7       	brne	.-32     	; 0x17e2 <i2c_start_wait+0x56>
    1802:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1806:	98 7f       	andi	r25, 0xF8	; 248
    1808:	90 32       	cpi	r25, 0x20	; 32
    180a:	11 f0       	breq	.+4      	; 0x1810 <i2c_start_wait+0x84>
    180c:	98 35       	cpi	r25, 0x58	; 88
    180e:	c9 f4       	brne	.+50     	; 0x1842 <i2c_start_wait+0xb6>
    1810:	94 e9       	ldi	r25, 0x94	; 148
    1812:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1816:	4f ef       	ldi	r20, 0xFF	; 255
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <i2c_start_wait+0x98>
    1820:	b9 01       	movw	r22, r18
    1822:	a8 01       	movw	r20, r16
    1824:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1828:	94 ff       	sbrs	r25, 4
    182a:	b2 cf       	rjmp	.-156    	; 0x1790 <i2c_start_wait+0x4>
    182c:	8a 01       	movw	r16, r20
    182e:	9b 01       	movw	r18, r22
    1830:	01 50       	subi	r16, 0x01	; 1
    1832:	11 09       	sbc	r17, r1
    1834:	21 09       	sbc	r18, r1
    1836:	31 09       	sbc	r19, r1
    1838:	45 2b       	or	r20, r21
    183a:	46 2b       	or	r20, r22
    183c:	47 2b       	or	r20, r23
    183e:	81 f7       	brne	.-32     	; 0x1820 <i2c_start_wait+0x94>
    1840:	a7 cf       	rjmp	.-178    	; 0x1790 <i2c_start_wait+0x4>
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	08 95       	ret

00001848 <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1848:	84 e9       	ldi	r24, 0x94	; 148
    184a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
    184e:	8f ef       	ldi	r24, 0xFF	; 255
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	b0 e0       	ldi	r27, 0x00	; 0
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
    1856:	02 c0       	rjmp	.+4      	; 0x185c <i2c_stop+0x14>
    1858:	db 01       	movw	r26, r22
    185a:	ca 01       	movw	r24, r20
    185c:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1860:	24 ff       	sbrs	r18, 4
    1862:	0a c0       	rjmp	.+20     	; 0x1878 <i2c_stop+0x30>
    1864:	ac 01       	movw	r20, r24
    1866:	bd 01       	movw	r22, r26
    1868:	41 50       	subi	r20, 0x01	; 1
    186a:	51 09       	sbc	r21, r1
    186c:	61 09       	sbc	r22, r1
    186e:	71 09       	sbc	r23, r1
    1870:	89 2b       	or	r24, r25
    1872:	8a 2b       	or	r24, r26
    1874:	8b 2b       	or	r24, r27
    1876:	81 f7       	brne	.-32     	; 0x1858 <i2c_stop+0x10>
    1878:	08 95       	ret

0000187a <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    187a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    187e:	84 e8       	ldi	r24, 0x84	; 132
    1880:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
    1884:	8f ef       	ldi	r24, 0xFF	; 255
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e0       	ldi	r26, 0x00	; 0
    188a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <i2c_write+0x18>
    188e:	db 01       	movw	r26, r22
    1890:	ca 01       	movw	r24, r20
    1892:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1896:	22 23       	and	r18, r18
    1898:	64 f0       	brlt	.+24     	; 0x18b2 <i2c_write+0x38>
    189a:	ac 01       	movw	r20, r24
    189c:	bd 01       	movw	r22, r26
    189e:	41 50       	subi	r20, 0x01	; 1
    18a0:	51 09       	sbc	r21, r1
    18a2:	61 09       	sbc	r22, r1
    18a4:	71 09       	sbc	r23, r1
    18a6:	89 2b       	or	r24, r25
    18a8:	8a 2b       	or	r24, r26
    18aa:	8b 2b       	or	r24, r27
    18ac:	81 f7       	brne	.-32     	; 0x188e <i2c_write+0x14>
    18ae:	db 01       	movw	r26, r22
    18b0:	ca 01       	movw	r24, r20
	if(i2c_timer == 0)
    18b2:	89 2b       	or	r24, r25
    18b4:	8a 2b       	or	r24, r26
    18b6:	8b 2b       	or	r24, r27
    18b8:	39 f0       	breq	.+14     	; 0x18c8 <i2c_write+0x4e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    18ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    18be:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    18c0:	88 32       	cpi	r24, 0x28	; 40
    18c2:	21 f0       	breq	.+8      	; 0x18cc <i2c_write+0x52>
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;
    18cc:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
    18ce:	08 95       	ret

000018d0 <u8x8_byte_avr_hw_i2c>:
}
#endif

#ifdef AVR_USE_HW_I2C
uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
	uint8_t *data;
	switch(msg){
    18d6:	68 31       	cpi	r22, 0x18	; 24
    18d8:	f9 f0       	breq	.+62     	; 0x1918 <u8x8_byte_avr_hw_i2c+0x48>
    18da:	28 f4       	brcc	.+10     	; 0x18e6 <u8x8_byte_avr_hw_i2c+0x16>
    18dc:	64 31       	cpi	r22, 0x14	; 20
    18de:	c1 f0       	breq	.+48     	; 0x1910 <u8x8_byte_avr_hw_i2c+0x40>
    18e0:	67 31       	cpi	r22, 0x17	; 23
    18e2:	81 f0       	breq	.+32     	; 0x1904 <u8x8_byte_avr_hw_i2c+0x34>
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <u8x8_byte_avr_hw_i2c+0x1e>
    18e6:	69 31       	cpi	r22, 0x19	; 25
    18e8:	e9 f0       	breq	.+58     	; 0x1924 <u8x8_byte_avr_hw_i2c+0x54>
    18ea:	60 32       	cpi	r22, 0x20	; 32
    18ec:	f9 f0       	breq	.+62     	; 0x192c <u8x8_byte_avr_hw_i2c+0x5c>
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
		default:
			return 0;
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	1e c0       	rjmp	.+60     	; 0x192e <u8x8_byte_avr_hw_i2c+0x5e>
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
    18f2:	89 01       	movw	r16, r18
    18f4:	0f 5f       	subi	r16, 0xFF	; 255
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	f9 01       	movw	r30, r18
    18fa:	80 81       	ld	r24, Z
    18fc:	0e 94 3d 0c 	call	0x187a	; 0x187a <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    1900:	4c 2f       	mov	r20, r28
				i2c_write(*data++);
    1902:	98 01       	movw	r18, r16
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    1904:	cf ef       	ldi	r28, 0xFF	; 255
    1906:	c4 0f       	add	r28, r20
    1908:	41 11       	cpse	r20, r1
    190a:	f3 cf       	rjmp	.-26     	; 0x18f2 <u8x8_byte_avr_hw_i2c+0x22>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	0f c0       	rjmp	.+30     	; 0x192e <u8x8_byte_avr_hw_i2c+0x5e>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
    1910:	0e 94 c0 0b 	call	0x1780	; 0x1780 <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init();
			break;
    1916:	0b c0       	rjmp	.+22     	; 0x192e <u8x8_byte_avr_hw_i2c+0x5e>
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    1918:	fc 01       	movw	r30, r24
    191a:	86 89       	ldd	r24, Z+22	; 0x16
    191c:	0e 94 c6 0b 	call	0x178c	; 0x178c <i2c_start_wait>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    1920:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    1922:	05 c0       	rjmp	.+10     	; 0x192e <u8x8_byte_avr_hw_i2c+0x5e>
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    1924:	0e 94 24 0c 	call	0x1848	; 0x1848 <i2c_stop>
			break;
		default:
			return 0;
	}
	return 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
    192a:	01 c0       	rjmp	.+2      	; 0x192e <u8x8_byte_avr_hw_i2c+0x5e>
		default:
			return 0;
	}
	return 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
}
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <u8x8_avr_delay>:
#endif

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    1936:	6a 32       	cpi	r22, 0x2A	; 42
    1938:	11 f1       	breq	.+68     	; 0x197e <u8x8_avr_delay+0x48>
    193a:	18 f4       	brcc	.+6      	; 0x1942 <u8x8_avr_delay+0xc>
    193c:	69 32       	cpi	r22, 0x29	; 41
    193e:	61 f1       	breq	.+88     	; 0x1998 <u8x8_avr_delay+0x62>
    1940:	04 c0       	rjmp	.+8      	; 0x194a <u8x8_avr_delay+0x14>
    1942:	6b 32       	cpi	r22, 0x2B	; 43
    1944:	21 f0       	breq	.+8      	; 0x194e <u8x8_avr_delay+0x18>
    1946:	6c 32       	cpi	r22, 0x2C	; 44
    1948:	69 f1       	breq	.+90     	; 0x19a4 <u8x8_avr_delay+0x6e>
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    194e:	24 2f       	mov	r18, r20
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	a4 e6       	ldi	r26, 0x64	; 100
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__umulhisi3>
    195a:	28 ef       	ldi	r18, 0xF8	; 248
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    1966:	23 32       	cpi	r18, 0x23	; 35
    1968:	f8 f4       	brcc	.+62     	; 0x19a8 <u8x8_avr_delay+0x72>
				break;

			__asm__ __volatile__ (
    196a:	82 2f       	mov	r24, r18
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <u8x8_avr_delay+0x36>
			break;
		default:
			return 0;
	}

	return 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1

			__asm__ __volatile__ (
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
    1972:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1974:	95 e3       	ldi	r25, 0x35	; 53
    1976:	9a 95       	dec	r25
    1978:	f1 f7       	brne	.-4      	; 0x1976 <u8x8_avr_delay+0x40>
    197a:	00 00       	nop
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    197c:	48 2f       	mov	r20, r24
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	84 0f       	add	r24, r20
    1982:	41 11       	cpse	r20, r1
    1984:	f7 cf       	rjmp	.-18     	; 0x1974 <u8x8_avr_delay+0x3e>
			break;
		default:
			return 0;
	}

	return 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    198a:	ef e9       	ldi	r30, 0x9F	; 159
    198c:	ff e0       	ldi	r31, 0x0F	; 15
    198e:	31 97       	sbiw	r30, 0x01	; 1
    1990:	f1 f7       	brne	.-4      	; 0x198e <u8x8_avr_delay+0x58>
    1992:	00 c0       	rjmp	.+0      	; 0x1994 <u8x8_avr_delay+0x5e>
    1994:	00 00       	nop
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    1996:	48 2f       	mov	r20, r24
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	84 0f       	add	r24, r20
    199c:	41 11       	cpse	r20, r1
    199e:	f5 cf       	rjmp	.-22     	; 0x198a <u8x8_avr_delay+0x54>
			break;
		default:
			return 0;
	}

	return 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	08 95       	ret
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	08 95       	ret
    19a8:	81 e0       	ldi	r24, 0x01	; 1
}
    19aa:	08 95       	ret

000019ac <UV_light>:
	
	}
}


void UV_light(){
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
	int temp = 0;
    19b4:	00 e0       	ldi	r16, 0x00	; 0
    19b6:	10 e0       	ldi	r17, 0x00	; 0

	while(temp <= type)
    19b8:	96 c0       	rjmp	.+300    	; 0x1ae6 <UV_light+0x13a>
	{
		int i = 0;
		while (i<10){
			
			if ((~PIND & (1<<PIND1)))
    19ba:	49 99       	sbic	0x09, 1	; 9
    19bc:	1a c0       	rjmp	.+52     	; 0x19f2 <UV_light+0x46>
			{
				PORTD &= ~(1<<PORTD3);
    19be:	8b b1       	in	r24, 0x0b	; 11
    19c0:	87 7f       	andi	r24, 0xF7	; 247
    19c2:	8b b9       	out	0x0b, r24	; 11
				
					// Sending information to LCD to print
					u8g2_ClearBuffer(&u8g2);
    19c4:	8f e4       	ldi	r24, 0x4F	; 79
    19c6:	96 e0       	ldi	r25, 0x06	; 6
    19c8:	0e 94 00 03 	call	0x600	; 0x600 <u8g2_ClearBuffer>
					u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    19cc:	68 e6       	ldi	r22, 0x68	; 104
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	8f e4       	ldi	r24, 0x4F	; 79
    19d2:	96 e0       	ldi	r25, 0x06	; 6
    19d4:	0e 94 dd 06 	call	0xdba	; 0xdba <u8g2_SetFont>
					u8g2_DrawStr(&u8g2, 30, 10, "Caution");
    19d8:	2d e6       	ldi	r18, 0x6D	; 109
    19da:	31 e0       	ldi	r19, 0x01	; 1
    19dc:	4a e0       	ldi	r20, 0x0A	; 10
    19de:	6e e1       	ldi	r22, 0x1E	; 30
    19e0:	8f e4       	ldi	r24, 0x4F	; 79
    19e2:	96 e0       	ldi	r25, 0x06	; 6
    19e4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
    19e8:	8f e4       	ldi	r24, 0x4F	; 79
    19ea:	96 e0       	ldi	r25, 0x06	; 6
    19ec:	0e 94 16 03 	call	0x62c	; 0x62c <u8g2_SendBuffer>
    19f0:	32 c0       	rjmp	.+100    	; 0x1a56 <UV_light+0xaa>
					// LCD ............
			}
			
			else if(~PINC& (1<<PINC2))
    19f2:	32 99       	sbic	0x06, 2	; 6
    19f4:	20 c0       	rjmp	.+64     	; 0x1a36 <UV_light+0x8a>
			{
					// Sending information to LCD to print
					u8g2_ClearBuffer(&u8g2);
    19f6:	8f e4       	ldi	r24, 0x4F	; 79
    19f8:	96 e0       	ldi	r25, 0x06	; 6
    19fa:	0e 94 00 03 	call	0x600	; 0x600 <u8g2_ClearBuffer>
					u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    19fe:	68 e6       	ldi	r22, 0x68	; 104
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	8f e4       	ldi	r24, 0x4F	; 79
    1a04:	96 e0       	ldi	r25, 0x06	; 6
    1a06:	0e 94 dd 06 	call	0xdba	; 0xdba <u8g2_SetFont>
					u8g2_DrawStr(&u8g2, 30, 10, "Force Stopped");
    1a0a:	25 e7       	ldi	r18, 0x75	; 117
    1a0c:	31 e0       	ldi	r19, 0x01	; 1
    1a0e:	4a e0       	ldi	r20, 0x0A	; 10
    1a10:	6e e1       	ldi	r22, 0x1E	; 30
    1a12:	8f e4       	ldi	r24, 0x4F	; 79
    1a14:	96 e0       	ldi	r25, 0x06	; 6
    1a16:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
    1a1a:	8f e4       	ldi	r24, 0x4F	; 79
    1a1c:	96 e0       	ldi	r25, 0x06	; 6
    1a1e:	0e 94 16 03 	call	0x62c	; 0x62c <u8g2_SendBuffer>
    1a22:	2f ef       	ldi	r18, 0xFF	; 255
    1a24:	83 ed       	ldi	r24, 0xD3	; 211
    1a26:	90 e3       	ldi	r25, 0x30	; 48
    1a28:	21 50       	subi	r18, 0x01	; 1
    1a2a:	80 40       	sbci	r24, 0x00	; 0
    1a2c:	90 40       	sbci	r25, 0x00	; 0
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <UV_light+0x7c>
    1a30:	00 c0       	rjmp	.+0      	; 0x1a32 <UV_light+0x86>
    1a32:	00 00       	nop
    1a34:	63 c0       	rjmp	.+198    	; 0x1afc <UV_light+0x150>
					_delay_ms(1000);
				return;
			}
			else
			{
				PORTD |= (1<<PORTD3);
    1a36:	8b b1       	in	r24, 0x0b	; 11
    1a38:	88 60       	ori	r24, 0x08	; 8
    1a3a:	8b b9       	out	0x0b, r24	; 11
    1a3c:	2f ef       	ldi	r18, 0xFF	; 255
    1a3e:	81 ee       	ldi	r24, 0xE1	; 225
    1a40:	94 e0       	ldi	r25, 0x04	; 4
    1a42:	21 50       	subi	r18, 0x01	; 1
    1a44:	80 40       	sbci	r24, 0x00	; 0
    1a46:	90 40       	sbci	r25, 0x00	; 0
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <UV_light+0x96>
    1a4a:	00 c0       	rjmp	.+0      	; 0x1a4c <UV_light+0xa0>
    1a4c:	00 00       	nop
				_delay_ms(100);
				i=i+1;
    1a4e:	21 96       	adiw	r28, 0x01	; 1
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <UV_light+0xaa>
    1a52:	c0 e0       	ldi	r28, 0x00	; 0
    1a54:	d0 e0       	ldi	r29, 0x00	; 0
	int temp = 0;

	while(temp <= type)
	{
		int i = 0;
		while (i<10){
    1a56:	ca 30       	cpi	r28, 0x0A	; 10
    1a58:	d1 05       	cpc	r29, r1
    1a5a:	0c f4       	brge	.+2      	; 0x1a5e <UV_light+0xb2>
    1a5c:	ae cf       	rjmp	.-164    	; 0x19ba <UV_light+0xe>
				PORTD |= (1<<PORTD3);
				_delay_ms(100);
				i=i+1;
			}
		}
		temp = temp+1;
    1a5e:	0f 5f       	subi	r16, 0xFF	; 255
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
		minute = (type-temp)/60;
    1a62:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1a66:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1a6a:	80 1b       	sub	r24, r16
    1a6c:	91 0b       	sbc	r25, r17
    1a6e:	6c e3       	ldi	r22, 0x3C	; 60
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__divmodhi4>
    1a76:	60 93 b5 06 	sts	0x06B5, r22	; 0x8006b5 <minute>
		second = (type-temp)%60;
    1a7a:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <second>
		sprintf(res, "%d:%d", minute,second);
    1a7e:	1f 92       	push	r1
    1a80:	8f 93       	push	r24
    1a82:	1f 92       	push	r1
    1a84:	6f 93       	push	r22
    1a86:	83 e8       	ldi	r24, 0x83	; 131
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	9f 93       	push	r25
    1a8c:	8f 93       	push	r24
    1a8e:	8b ee       	ldi	r24, 0xEB	; 235
    1a90:	95 e0       	ldi	r25, 0x05	; 5
    1a92:	9f 93       	push	r25
    1a94:	8f 93       	push	r24
    1a96:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <sprintf>
		
		
		// Sending information to LCD to print
			u8g2_ClearBuffer(&u8g2);
    1a9a:	8f e4       	ldi	r24, 0x4F	; 79
    1a9c:	96 e0       	ldi	r25, 0x06	; 6
    1a9e:	0e 94 00 03 	call	0x600	; 0x600 <u8g2_ClearBuffer>
			u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    1aa2:	68 e6       	ldi	r22, 0x68	; 104
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	8f e4       	ldi	r24, 0x4F	; 79
    1aa8:	96 e0       	ldi	r25, 0x06	; 6
    1aaa:	0e 94 dd 06 	call	0xdba	; 0xdba <u8g2_SetFont>
			
			u8g2_DrawStr(&u8g2, 30, 10, "Time Left");
    1aae:	29 e8       	ldi	r18, 0x89	; 137
    1ab0:	31 e0       	ldi	r19, 0x01	; 1
    1ab2:	4a e0       	ldi	r20, 0x0A	; 10
    1ab4:	6e e1       	ldi	r22, 0x1E	; 30
    1ab6:	8f e4       	ldi	r24, 0x4F	; 79
    1ab8:	96 e0       	ldi	r25, 0x06	; 6
    1aba:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 40, 30, res);
    1abe:	2b ee       	ldi	r18, 0xEB	; 235
    1ac0:	35 e0       	ldi	r19, 0x05	; 5
    1ac2:	4e e1       	ldi	r20, 0x1E	; 30
    1ac4:	68 e2       	ldi	r22, 0x28	; 40
    1ac6:	8f e4       	ldi	r24, 0x4F	; 79
    1ac8:	96 e0       	ldi	r25, 0x06	; 6
    1aca:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
    1ace:	8f e4       	ldi	r24, 0x4F	; 79
    1ad0:	96 e0       	ldi	r25, 0x06	; 6
    1ad2:	0e 94 16 03 	call	0x62c	; 0x62c <u8g2_SendBuffer>
    1ad6:	8d b7       	in	r24, 0x3d	; 61
    1ad8:	9e b7       	in	r25, 0x3e	; 62
    1ada:	08 96       	adiw	r24, 0x08	; 8
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	9e bf       	out	0x3e, r25	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	8d bf       	out	0x3d, r24	; 61


void UV_light(){
	int temp = 0;

	while(temp <= type)
    1ae6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1aea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1aee:	80 17       	cp	r24, r16
    1af0:	91 07       	cpc	r25, r17
    1af2:	0c f0       	brlt	.+2      	; 0x1af6 <UV_light+0x14a>
    1af4:	ae cf       	rjmp	.-164    	; 0x1a52 <UV_light+0xa6>
			u8g2_DrawStr(&u8g2, 40, 30, res);
			u8g2_SendBuffer(&u8g2);
	   // LCD ............
	}
	
	PORTD &= ~(1<<PORTD3);
    1af6:	8b b1       	in	r24, 0x0b	; 11
    1af8:	87 7f       	andi	r24, 0xF7	; 247
    1afa:	8b b9       	out	0x0b, r24	; 11

	return;
	
}
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	08 95       	ret

00001b06 <updateMenu>:




void updateMenu(){
	switch(type){
    1b06:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b0a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1b0e:	80 3e       	cpi	r24, 0xE0	; 224
    1b10:	21 e0       	ldi	r18, 0x01	; 1
    1b12:	92 07       	cpc	r25, r18
    1b14:	41 f1       	breq	.+80     	; 0x1b66 <updateMenu+0x60>
    1b16:	88 35       	cpi	r24, 0x58	; 88
    1b18:	22 e0       	ldi	r18, 0x02	; 2
    1b1a:	92 07       	cpc	r25, r18
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <updateMenu+0x1a>
    1b1e:	42 c0       	rjmp	.+132    	; 0x1ba4 <updateMenu+0x9e>
    1b20:	88 36       	cpi	r24, 0x68	; 104
    1b22:	91 40       	sbci	r25, 0x01	; 1
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <updateMenu+0x22>
    1b26:	5c c0       	rjmp	.+184    	; 0x1be0 <updateMenu+0xda>
		
		case 6*60:
			// Sending information to LCD to print
			u8g2_ClearBuffer(&u8g2);
    1b28:	8f e4       	ldi	r24, 0x4F	; 79
    1b2a:	96 e0       	ldi	r25, 0x06	; 6
    1b2c:	0e 94 00 03 	call	0x600	; 0x600 <u8g2_ClearBuffer>
			u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    1b30:	68 e6       	ldi	r22, 0x68	; 104
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	8f e4       	ldi	r24, 0x4F	; 79
    1b36:	96 e0       	ldi	r25, 0x06	; 6
    1b38:	0e 94 dd 06 	call	0xdba	; 0xdba <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 30, 10, "Small Items");
    1b3c:	23 e9       	ldi	r18, 0x93	; 147
    1b3e:	31 e0       	ldi	r19, 0x01	; 1
    1b40:	4a e0       	ldi	r20, 0x0A	; 10
    1b42:	6e e1       	ldi	r22, 0x1E	; 30
    1b44:	8f e4       	ldi	r24, 0x4F	; 79
    1b46:	96 e0       	ldi	r25, 0x06	; 6
    1b48:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 30, 40, "6 Minutes");
    1b4c:	2f e9       	ldi	r18, 0x9F	; 159
    1b4e:	31 e0       	ldi	r19, 0x01	; 1
    1b50:	48 e2       	ldi	r20, 0x28	; 40
    1b52:	6e e1       	ldi	r22, 0x1E	; 30
    1b54:	8f e4       	ldi	r24, 0x4F	; 79
    1b56:	96 e0       	ldi	r25, 0x06	; 6
    1b58:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
    1b5c:	8f e4       	ldi	r24, 0x4F	; 79
    1b5e:	96 e0       	ldi	r25, 0x06	; 6
    1b60:	0e 94 16 03 	call	0x62c	; 0x62c <u8g2_SendBuffer>
			// LCD ............
		break;
    1b64:	08 95       	ret
		
		case 8*60:							//Third display state
			// Sending information to LCD to print
			u8g2_ClearBuffer(&u8g2);
    1b66:	8f e4       	ldi	r24, 0x4F	; 79
    1b68:	96 e0       	ldi	r25, 0x06	; 6
    1b6a:	0e 94 00 03 	call	0x600	; 0x600 <u8g2_ClearBuffer>
			u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    1b6e:	68 e6       	ldi	r22, 0x68	; 104
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	8f e4       	ldi	r24, 0x4F	; 79
    1b74:	96 e0       	ldi	r25, 0x06	; 6
    1b76:	0e 94 dd 06 	call	0xdba	; 0xdba <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 30, 10, "Medium Items");
    1b7a:	29 ea       	ldi	r18, 0xA9	; 169
    1b7c:	31 e0       	ldi	r19, 0x01	; 1
    1b7e:	4a e0       	ldi	r20, 0x0A	; 10
    1b80:	6e e1       	ldi	r22, 0x1E	; 30
    1b82:	8f e4       	ldi	r24, 0x4F	; 79
    1b84:	96 e0       	ldi	r25, 0x06	; 6
    1b86:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 30, 40, "8 Minutes");
    1b8a:	26 eb       	ldi	r18, 0xB6	; 182
    1b8c:	31 e0       	ldi	r19, 0x01	; 1
    1b8e:	48 e2       	ldi	r20, 0x28	; 40
    1b90:	6e e1       	ldi	r22, 0x1E	; 30
    1b92:	8f e4       	ldi	r24, 0x4F	; 79
    1b94:	96 e0       	ldi	r25, 0x06	; 6
    1b96:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
    1b9a:	8f e4       	ldi	r24, 0x4F	; 79
    1b9c:	96 e0       	ldi	r25, 0x06	; 6
    1b9e:	0e 94 16 03 	call	0x62c	; 0x62c <u8g2_SendBuffer>
			// LCD ............
		break;
    1ba2:	08 95       	ret
		
		
		case 10*60:
			// Sending information to LCD to print
			u8g2_ClearBuffer(&u8g2);
    1ba4:	8f e4       	ldi	r24, 0x4F	; 79
    1ba6:	96 e0       	ldi	r25, 0x06	; 6
    1ba8:	0e 94 00 03 	call	0x600	; 0x600 <u8g2_ClearBuffer>
			u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    1bac:	68 e6       	ldi	r22, 0x68	; 104
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	8f e4       	ldi	r24, 0x4F	; 79
    1bb2:	96 e0       	ldi	r25, 0x06	; 6
    1bb4:	0e 94 dd 06 	call	0xdba	; 0xdba <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 30, 10, "Large Items");
    1bb8:	20 ec       	ldi	r18, 0xC0	; 192
    1bba:	31 e0       	ldi	r19, 0x01	; 1
    1bbc:	4a e0       	ldi	r20, 0x0A	; 10
    1bbe:	6e e1       	ldi	r22, 0x1E	; 30
    1bc0:	8f e4       	ldi	r24, 0x4F	; 79
    1bc2:	96 e0       	ldi	r25, 0x06	; 6
    1bc4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 30, 40, "10 Minutes");
    1bc8:	2c ec       	ldi	r18, 0xCC	; 204
    1bca:	31 e0       	ldi	r19, 0x01	; 1
    1bcc:	48 e2       	ldi	r20, 0x28	; 40
    1bce:	6e e1       	ldi	r22, 0x1E	; 30
    1bd0:	8f e4       	ldi	r24, 0x4F	; 79
    1bd2:	96 e0       	ldi	r25, 0x06	; 6
    1bd4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
			u8g2_SendBuffer(&u8g2);
    1bd8:	8f e4       	ldi	r24, 0x4F	; 79
    1bda:	96 e0       	ldi	r25, 0x06	; 6
    1bdc:	0e 94 16 03 	call	0x62c	; 0x62c <u8g2_SendBuffer>
    1be0:	08 95       	ret

00001be2 <main>:
char res[100];

int main (void)
{
	
	DDRC = 0x00;
    1be2:	17 b8       	out	0x07, r1	; 7
	DDRD = 0xfe;
    1be4:	8e ef       	ldi	r24, 0xFE	; 254
    1be6:	8a b9       	out	0x0a, r24	; 10
	PORTC = 0xff;
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	88 b9       	out	0x08, r24	; 8
	PORTD = 0x01;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	8b b9       	out	0x0b, r24	; 11
	
	
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
    1bf0:	2b e9       	ldi	r18, 0x9B	; 155
    1bf2:	3c e0       	ldi	r19, 0x0C	; 12
    1bf4:	48 e6       	ldi	r20, 0x68	; 104
    1bf6:	5c e0       	ldi	r21, 0x0C	; 12
    1bf8:	62 e0       	ldi	r22, 0x02	; 2
    1bfa:	71 e0       	ldi	r23, 0x01	; 1
    1bfc:	8f e4       	ldi	r24, 0x4F	; 79
    1bfe:	96 e0       	ldi	r25, 0x06	; 6
    1c00:	0e 94 27 03 	call	0x64e	; 0x64e <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, SSD1306_ADDR);
    1c04:	88 e7       	ldi	r24, 0x78	; 120
    1c06:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    1c0a:	8f e4       	ldi	r24, 0x4F	; 79
    1c0c:	96 e0       	ldi	r25, 0x06	; 6
    1c0e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	8f e4       	ldi	r24, 0x4F	; 79
    1c16:	96 e0       	ldi	r25, 0x06	; 6
    1c18:	0e 94 b6 0a 	call	0x156c	; 0x156c <u8x8_SetPowerSave>
	
	u8g2_ClearBuffer(&u8g2);
    1c1c:	8f e4       	ldi	r24, 0x4F	; 79
    1c1e:	96 e0       	ldi	r25, 0x06	; 6
    1c20:	0e 94 00 03 	call	0x600	; 0x600 <u8g2_ClearBuffer>
	u8g2_SetFont(&u8g2, u8g2_font_smart_patrol_nbp_tr);
    1c24:	68 e6       	ldi	r22, 0x68	; 104
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	8f e4       	ldi	r24, 0x4F	; 79
    1c2a:	96 e0       	ldi	r25, 0x06	; 6
    1c2c:	0e 94 dd 06 	call	0xdba	; 0xdba <u8g2_SetFont>
	u8g2_SetFontRefHeightText(&u8g2);
    1c30:	8f e4       	ldi	r24, 0x4F	; 79
    1c32:	96 e0       	ldi	r25, 0x06	; 6
    1c34:	0e 94 ca 06 	call	0xd94	; 0xd94 <u8g2_SetFontRefHeightText>
	u8g2_SetFontPosTop(&u8g2);
    1c38:	8f e4       	ldi	r24, 0x4F	; 79
    1c3a:	96 e0       	ldi	r25, 0x06	; 6
    1c3c:	0e 94 d7 06 	call	0xdae	; 0xdae <u8g2_SetFontPosTop>
	u8g2_DrawStr(&u8g2, 10, 20, "....The Squad....");
    1c40:	27 ed       	ldi	r18, 0xD7	; 215
    1c42:	31 e0       	ldi	r19, 0x01	; 1
    1c44:	44 e1       	ldi	r20, 0x14	; 20
    1c46:	6a e0       	ldi	r22, 0x0A	; 10
    1c48:	8f e4       	ldi	r24, 0x4F	; 79
    1c4a:	96 e0       	ldi	r25, 0x06	; 6
    1c4c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <u8g2_DrawStr>
	u8g2_SendBuffer(&u8g2);
    1c50:	8f e4       	ldi	r24, 0x4F	; 79
    1c52:	96 e0       	ldi	r25, 0x06	; 6
    1c54:	0e 94 16 03 	call	0x62c	; 0x62c <u8g2_SendBuffer>
    1c58:	2f ef       	ldi	r18, 0xFF	; 255
    1c5a:	87 ea       	ldi	r24, 0xA7	; 167
    1c5c:	91 e6       	ldi	r25, 0x61	; 97
    1c5e:	21 50       	subi	r18, 0x01	; 1
    1c60:	80 40       	sbci	r24, 0x00	; 0
    1c62:	90 40       	sbci	r25, 0x00	; 0
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <main+0x7c>
    1c66:	00 c0       	rjmp	.+0      	; 0x1c68 <main+0x86>
    1c68:	00 00       	nop
	_delay_ms(2000);
while (1)
	{
	
	
	if(~PINC& 0x01){ UV_light(); }
    1c6a:	30 9b       	sbis	0x06, 0	; 6
    1c6c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <UV_light>
	
	if(~PINC& 0x02)
    1c70:	31 99       	sbic	0x06, 1	; 6
    1c72:	1e c0       	rjmp	.+60     	; 0x1cb0 <main+0xce>
    1c74:	2f ef       	ldi	r18, 0xFF	; 255
    1c76:	89 e6       	ldi	r24, 0x69	; 105
    1c78:	98 e1       	ldi	r25, 0x18	; 24
    1c7a:	21 50       	subi	r18, 0x01	; 1
    1c7c:	80 40       	sbci	r24, 0x00	; 0
    1c7e:	90 40       	sbci	r25, 0x00	; 0
    1c80:	e1 f7       	brne	.-8      	; 0x1c7a <main+0x98>
    1c82:	00 c0       	rjmp	.+0      	; 0x1c84 <main+0xa2>
    1c84:	00 00       	nop
	{
		_delay_ms(500);
		type = type + 120;
    1c86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1c8a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1c8e:	88 58       	subi	r24, 0x88	; 136
    1c90:	9f 4f       	sbci	r25, 0xFF	; 255
    1c92:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1c96:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(type > 60*10){type=60*10;}
    1c9a:	89 35       	cpi	r24, 0x59	; 89
    1c9c:	92 40       	sbci	r25, 0x02	; 2
    1c9e:	34 f0       	brlt	.+12     	; 0x1cac <main+0xca>
    1ca0:	88 e5       	ldi	r24, 0x58	; 88
    1ca2:	92 e0       	ldi	r25, 0x02	; 2
    1ca4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ca8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		updateMenu();
    1cac:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <updateMenu>
		
	}
	
	if(~PINC& 0x08)
    1cb0:	33 99       	sbic	0x06, 3	; 6
    1cb2:	1e c0       	rjmp	.+60     	; 0x1cf0 <main+0x10e>
    1cb4:	8f ef       	ldi	r24, 0xFF	; 255
    1cb6:	99 e6       	ldi	r25, 0x69	; 105
    1cb8:	28 e1       	ldi	r18, 0x18	; 24
    1cba:	81 50       	subi	r24, 0x01	; 1
    1cbc:	90 40       	sbci	r25, 0x00	; 0
    1cbe:	20 40       	sbci	r18, 0x00	; 0
    1cc0:	e1 f7       	brne	.-8      	; 0x1cba <main+0xd8>
    1cc2:	00 c0       	rjmp	.+0      	; 0x1cc4 <main+0xe2>
    1cc4:	00 00       	nop
	{
		_delay_ms(500);
		type = type - 120;
    1cc6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1cca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1cce:	88 57       	subi	r24, 0x78	; 120
    1cd0:	91 09       	sbc	r25, r1
    1cd2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1cd6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(type < 60*6){type=60*6;}
    1cda:	88 36       	cpi	r24, 0x68	; 104
    1cdc:	91 40       	sbci	r25, 0x01	; 1
    1cde:	34 f4       	brge	.+12     	; 0x1cec <main+0x10a>
    1ce0:	88 e6       	ldi	r24, 0x68	; 104
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ce8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		updateMenu();
    1cec:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <updateMenu>
	}
	updateMenu();
    1cf0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <updateMenu>
	PORTD &= ~(1<<PORTD3);
    1cf4:	8b b1       	in	r24, 0x0b	; 11
    1cf6:	87 7f       	andi	r24, 0xF7	; 247
    1cf8:	8b b9       	out	0x0b, r24	; 11
	
	}
    1cfa:	b7 cf       	rjmp	.-146    	; 0x1c6a <main+0x88>

00001cfc <__divmodhi4>:
    1cfc:	97 fb       	bst	r25, 7
    1cfe:	07 2e       	mov	r0, r23
    1d00:	16 f4       	brtc	.+4      	; 0x1d06 <__divmodhi4+0xa>
    1d02:	00 94       	com	r0
    1d04:	07 d0       	rcall	.+14     	; 0x1d14 <__divmodhi4_neg1>
    1d06:	77 fd       	sbrc	r23, 7
    1d08:	09 d0       	rcall	.+18     	; 0x1d1c <__divmodhi4_neg2>
    1d0a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__udivmodhi4>
    1d0e:	07 fc       	sbrc	r0, 7
    1d10:	05 d0       	rcall	.+10     	; 0x1d1c <__divmodhi4_neg2>
    1d12:	3e f4       	brtc	.+14     	; 0x1d22 <__divmodhi4_exit>

00001d14 <__divmodhi4_neg1>:
    1d14:	90 95       	com	r25
    1d16:	81 95       	neg	r24
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	08 95       	ret

00001d1c <__divmodhi4_neg2>:
    1d1c:	70 95       	com	r23
    1d1e:	61 95       	neg	r22
    1d20:	7f 4f       	sbci	r23, 0xFF	; 255

00001d22 <__divmodhi4_exit>:
    1d22:	08 95       	ret

00001d24 <__udivmodsi4>:
    1d24:	a1 e2       	ldi	r26, 0x21	; 33
    1d26:	1a 2e       	mov	r1, r26
    1d28:	aa 1b       	sub	r26, r26
    1d2a:	bb 1b       	sub	r27, r27
    1d2c:	fd 01       	movw	r30, r26
    1d2e:	0d c0       	rjmp	.+26     	; 0x1d4a <__udivmodsi4_ep>

00001d30 <__udivmodsi4_loop>:
    1d30:	aa 1f       	adc	r26, r26
    1d32:	bb 1f       	adc	r27, r27
    1d34:	ee 1f       	adc	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	a2 17       	cp	r26, r18
    1d3a:	b3 07       	cpc	r27, r19
    1d3c:	e4 07       	cpc	r30, r20
    1d3e:	f5 07       	cpc	r31, r21
    1d40:	20 f0       	brcs	.+8      	; 0x1d4a <__udivmodsi4_ep>
    1d42:	a2 1b       	sub	r26, r18
    1d44:	b3 0b       	sbc	r27, r19
    1d46:	e4 0b       	sbc	r30, r20
    1d48:	f5 0b       	sbc	r31, r21

00001d4a <__udivmodsi4_ep>:
    1d4a:	66 1f       	adc	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	88 1f       	adc	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	1a 94       	dec	r1
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <__udivmodsi4_loop>
    1d56:	60 95       	com	r22
    1d58:	70 95       	com	r23
    1d5a:	80 95       	com	r24
    1d5c:	90 95       	com	r25
    1d5e:	9b 01       	movw	r18, r22
    1d60:	ac 01       	movw	r20, r24
    1d62:	bd 01       	movw	r22, r26
    1d64:	cf 01       	movw	r24, r30
    1d66:	08 95       	ret

00001d68 <__umulhisi3>:
    1d68:	a2 9f       	mul	r26, r18
    1d6a:	b0 01       	movw	r22, r0
    1d6c:	b3 9f       	mul	r27, r19
    1d6e:	c0 01       	movw	r24, r0
    1d70:	a3 9f       	mul	r26, r19
    1d72:	70 0d       	add	r23, r0
    1d74:	81 1d       	adc	r24, r1
    1d76:	11 24       	eor	r1, r1
    1d78:	91 1d       	adc	r25, r1
    1d7a:	b2 9f       	mul	r27, r18
    1d7c:	70 0d       	add	r23, r0
    1d7e:	81 1d       	adc	r24, r1
    1d80:	11 24       	eor	r1, r1
    1d82:	91 1d       	adc	r25, r1
    1d84:	08 95       	ret

00001d86 <__udivmodhi4>:
    1d86:	aa 1b       	sub	r26, r26
    1d88:	bb 1b       	sub	r27, r27
    1d8a:	51 e1       	ldi	r21, 0x11	; 17
    1d8c:	07 c0       	rjmp	.+14     	; 0x1d9c <__udivmodhi4_ep>

00001d8e <__udivmodhi4_loop>:
    1d8e:	aa 1f       	adc	r26, r26
    1d90:	bb 1f       	adc	r27, r27
    1d92:	a6 17       	cp	r26, r22
    1d94:	b7 07       	cpc	r27, r23
    1d96:	10 f0       	brcs	.+4      	; 0x1d9c <__udivmodhi4_ep>
    1d98:	a6 1b       	sub	r26, r22
    1d9a:	b7 0b       	sbc	r27, r23

00001d9c <__udivmodhi4_ep>:
    1d9c:	88 1f       	adc	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	5a 95       	dec	r21
    1da2:	a9 f7       	brne	.-22     	; 0x1d8e <__udivmodhi4_loop>
    1da4:	80 95       	com	r24
    1da6:	90 95       	com	r25
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	08 95       	ret

00001dae <memset>:
    1dae:	dc 01       	movw	r26, r24
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <memset+0x6>
    1db2:	6d 93       	st	X+, r22
    1db4:	41 50       	subi	r20, 0x01	; 1
    1db6:	50 40       	sbci	r21, 0x00	; 0
    1db8:	e0 f7       	brcc	.-8      	; 0x1db2 <memset+0x4>
    1dba:	08 95       	ret

00001dbc <sprintf>:
    1dbc:	ae e0       	ldi	r26, 0x0E	; 14
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e4 ee       	ldi	r30, 0xE4	; 228
    1dc2:	fe e0       	ldi	r31, 0x0E	; 14
    1dc4:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__prologue_saves__+0x1c>
    1dc8:	0d 89       	ldd	r16, Y+21	; 0x15
    1dca:	1e 89       	ldd	r17, Y+22	; 0x16
    1dcc:	86 e0       	ldi	r24, 0x06	; 6
    1dce:	8c 83       	std	Y+4, r24	; 0x04
    1dd0:	1a 83       	std	Y+2, r17	; 0x02
    1dd2:	09 83       	std	Y+1, r16	; 0x01
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	9f e7       	ldi	r25, 0x7F	; 127
    1dd8:	9e 83       	std	Y+6, r25	; 0x06
    1dda:	8d 83       	std	Y+5, r24	; 0x05
    1ddc:	ae 01       	movw	r20, r28
    1dde:	47 5e       	subi	r20, 0xE7	; 231
    1de0:	5f 4f       	sbci	r21, 0xFF	; 255
    1de2:	6f 89       	ldd	r22, Y+23	; 0x17
    1de4:	78 8d       	ldd	r23, Y+24	; 0x18
    1de6:	ce 01       	movw	r24, r28
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <vfprintf>
    1dee:	ef 81       	ldd	r30, Y+7	; 0x07
    1df0:	f8 85       	ldd	r31, Y+8	; 0x08
    1df2:	e0 0f       	add	r30, r16
    1df4:	f1 1f       	adc	r31, r17
    1df6:	10 82       	st	Z, r1
    1df8:	2e 96       	adiw	r28, 0x0e	; 14
    1dfa:	e4 e0       	ldi	r30, 0x04	; 4
    1dfc:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__epilogue_restores__+0x1c>

00001e00 <vfprintf>:
    1e00:	ab e0       	ldi	r26, 0x0B	; 11
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e6 e0       	ldi	r30, 0x06	; 6
    1e06:	ff e0       	ldi	r31, 0x0F	; 15
    1e08:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__>
    1e0c:	6c 01       	movw	r12, r24
    1e0e:	7b 01       	movw	r14, r22
    1e10:	8a 01       	movw	r16, r20
    1e12:	fc 01       	movw	r30, r24
    1e14:	17 82       	std	Z+7, r1	; 0x07
    1e16:	16 82       	std	Z+6, r1	; 0x06
    1e18:	83 81       	ldd	r24, Z+3	; 0x03
    1e1a:	81 ff       	sbrs	r24, 1
    1e1c:	cc c1       	rjmp	.+920    	; 0x21b6 <vfprintf+0x3b6>
    1e1e:	ce 01       	movw	r24, r28
    1e20:	01 96       	adiw	r24, 0x01	; 1
    1e22:	3c 01       	movw	r6, r24
    1e24:	f6 01       	movw	r30, r12
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	f7 01       	movw	r30, r14
    1e2a:	93 fd       	sbrc	r25, 3
    1e2c:	85 91       	lpm	r24, Z+
    1e2e:	93 ff       	sbrs	r25, 3
    1e30:	81 91       	ld	r24, Z+
    1e32:	7f 01       	movw	r14, r30
    1e34:	88 23       	and	r24, r24
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <vfprintf+0x3a>
    1e38:	ba c1       	rjmp	.+884    	; 0x21ae <vfprintf+0x3ae>
    1e3a:	85 32       	cpi	r24, 0x25	; 37
    1e3c:	39 f4       	brne	.+14     	; 0x1e4c <vfprintf+0x4c>
    1e3e:	93 fd       	sbrc	r25, 3
    1e40:	85 91       	lpm	r24, Z+
    1e42:	93 ff       	sbrs	r25, 3
    1e44:	81 91       	ld	r24, Z+
    1e46:	7f 01       	movw	r14, r30
    1e48:	85 32       	cpi	r24, 0x25	; 37
    1e4a:	29 f4       	brne	.+10     	; 0x1e56 <vfprintf+0x56>
    1e4c:	b6 01       	movw	r22, r12
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    1e54:	e7 cf       	rjmp	.-50     	; 0x1e24 <vfprintf+0x24>
    1e56:	91 2c       	mov	r9, r1
    1e58:	21 2c       	mov	r2, r1
    1e5a:	31 2c       	mov	r3, r1
    1e5c:	ff e1       	ldi	r31, 0x1F	; 31
    1e5e:	f3 15       	cp	r31, r3
    1e60:	d8 f0       	brcs	.+54     	; 0x1e98 <vfprintf+0x98>
    1e62:	8b 32       	cpi	r24, 0x2B	; 43
    1e64:	79 f0       	breq	.+30     	; 0x1e84 <vfprintf+0x84>
    1e66:	38 f4       	brcc	.+14     	; 0x1e76 <vfprintf+0x76>
    1e68:	80 32       	cpi	r24, 0x20	; 32
    1e6a:	79 f0       	breq	.+30     	; 0x1e8a <vfprintf+0x8a>
    1e6c:	83 32       	cpi	r24, 0x23	; 35
    1e6e:	a1 f4       	brne	.+40     	; 0x1e98 <vfprintf+0x98>
    1e70:	23 2d       	mov	r18, r3
    1e72:	20 61       	ori	r18, 0x10	; 16
    1e74:	1d c0       	rjmp	.+58     	; 0x1eb0 <vfprintf+0xb0>
    1e76:	8d 32       	cpi	r24, 0x2D	; 45
    1e78:	61 f0       	breq	.+24     	; 0x1e92 <vfprintf+0x92>
    1e7a:	80 33       	cpi	r24, 0x30	; 48
    1e7c:	69 f4       	brne	.+26     	; 0x1e98 <vfprintf+0x98>
    1e7e:	23 2d       	mov	r18, r3
    1e80:	21 60       	ori	r18, 0x01	; 1
    1e82:	16 c0       	rjmp	.+44     	; 0x1eb0 <vfprintf+0xb0>
    1e84:	83 2d       	mov	r24, r3
    1e86:	82 60       	ori	r24, 0x02	; 2
    1e88:	38 2e       	mov	r3, r24
    1e8a:	e3 2d       	mov	r30, r3
    1e8c:	e4 60       	ori	r30, 0x04	; 4
    1e8e:	3e 2e       	mov	r3, r30
    1e90:	2a c0       	rjmp	.+84     	; 0x1ee6 <vfprintf+0xe6>
    1e92:	f3 2d       	mov	r31, r3
    1e94:	f8 60       	ori	r31, 0x08	; 8
    1e96:	1d c0       	rjmp	.+58     	; 0x1ed2 <vfprintf+0xd2>
    1e98:	37 fc       	sbrc	r3, 7
    1e9a:	2d c0       	rjmp	.+90     	; 0x1ef6 <vfprintf+0xf6>
    1e9c:	20 ed       	ldi	r18, 0xD0	; 208
    1e9e:	28 0f       	add	r18, r24
    1ea0:	2a 30       	cpi	r18, 0x0A	; 10
    1ea2:	40 f0       	brcs	.+16     	; 0x1eb4 <vfprintf+0xb4>
    1ea4:	8e 32       	cpi	r24, 0x2E	; 46
    1ea6:	b9 f4       	brne	.+46     	; 0x1ed6 <vfprintf+0xd6>
    1ea8:	36 fc       	sbrc	r3, 6
    1eaa:	81 c1       	rjmp	.+770    	; 0x21ae <vfprintf+0x3ae>
    1eac:	23 2d       	mov	r18, r3
    1eae:	20 64       	ori	r18, 0x40	; 64
    1eb0:	32 2e       	mov	r3, r18
    1eb2:	19 c0       	rjmp	.+50     	; 0x1ee6 <vfprintf+0xe6>
    1eb4:	36 fe       	sbrs	r3, 6
    1eb6:	06 c0       	rjmp	.+12     	; 0x1ec4 <vfprintf+0xc4>
    1eb8:	8a e0       	ldi	r24, 0x0A	; 10
    1eba:	98 9e       	mul	r9, r24
    1ebc:	20 0d       	add	r18, r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	92 2e       	mov	r9, r18
    1ec2:	11 c0       	rjmp	.+34     	; 0x1ee6 <vfprintf+0xe6>
    1ec4:	ea e0       	ldi	r30, 0x0A	; 10
    1ec6:	2e 9e       	mul	r2, r30
    1ec8:	20 0d       	add	r18, r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	22 2e       	mov	r2, r18
    1ece:	f3 2d       	mov	r31, r3
    1ed0:	f0 62       	ori	r31, 0x20	; 32
    1ed2:	3f 2e       	mov	r3, r31
    1ed4:	08 c0       	rjmp	.+16     	; 0x1ee6 <vfprintf+0xe6>
    1ed6:	8c 36       	cpi	r24, 0x6C	; 108
    1ed8:	21 f4       	brne	.+8      	; 0x1ee2 <vfprintf+0xe2>
    1eda:	83 2d       	mov	r24, r3
    1edc:	80 68       	ori	r24, 0x80	; 128
    1ede:	38 2e       	mov	r3, r24
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <vfprintf+0xe6>
    1ee2:	88 36       	cpi	r24, 0x68	; 104
    1ee4:	41 f4       	brne	.+16     	; 0x1ef6 <vfprintf+0xf6>
    1ee6:	f7 01       	movw	r30, r14
    1ee8:	93 fd       	sbrc	r25, 3
    1eea:	85 91       	lpm	r24, Z+
    1eec:	93 ff       	sbrs	r25, 3
    1eee:	81 91       	ld	r24, Z+
    1ef0:	7f 01       	movw	r14, r30
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	b3 cf       	rjmp	.-154    	; 0x1e5c <vfprintf+0x5c>
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	9f 7d       	andi	r25, 0xDF	; 223
    1efa:	95 54       	subi	r25, 0x45	; 69
    1efc:	93 30       	cpi	r25, 0x03	; 3
    1efe:	28 f4       	brcc	.+10     	; 0x1f0a <vfprintf+0x10a>
    1f00:	0c 5f       	subi	r16, 0xFC	; 252
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	9f e3       	ldi	r25, 0x3F	; 63
    1f06:	99 83       	std	Y+1, r25	; 0x01
    1f08:	0d c0       	rjmp	.+26     	; 0x1f24 <vfprintf+0x124>
    1f0a:	83 36       	cpi	r24, 0x63	; 99
    1f0c:	31 f0       	breq	.+12     	; 0x1f1a <vfprintf+0x11a>
    1f0e:	83 37       	cpi	r24, 0x73	; 115
    1f10:	71 f0       	breq	.+28     	; 0x1f2e <vfprintf+0x12e>
    1f12:	83 35       	cpi	r24, 0x53	; 83
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <vfprintf+0x118>
    1f16:	59 c0       	rjmp	.+178    	; 0x1fca <vfprintf+0x1ca>
    1f18:	21 c0       	rjmp	.+66     	; 0x1f5c <vfprintf+0x15c>
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	80 81       	ld	r24, Z
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	0e 5f       	subi	r16, 0xFE	; 254
    1f22:	1f 4f       	sbci	r17, 0xFF	; 255
    1f24:	88 24       	eor	r8, r8
    1f26:	83 94       	inc	r8
    1f28:	91 2c       	mov	r9, r1
    1f2a:	53 01       	movw	r10, r6
    1f2c:	13 c0       	rjmp	.+38     	; 0x1f54 <vfprintf+0x154>
    1f2e:	28 01       	movw	r4, r16
    1f30:	f2 e0       	ldi	r31, 0x02	; 2
    1f32:	4f 0e       	add	r4, r31
    1f34:	51 1c       	adc	r5, r1
    1f36:	f8 01       	movw	r30, r16
    1f38:	a0 80       	ld	r10, Z
    1f3a:	b1 80       	ldd	r11, Z+1	; 0x01
    1f3c:	36 fe       	sbrs	r3, 6
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <vfprintf+0x146>
    1f40:	69 2d       	mov	r22, r9
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <vfprintf+0x14a>
    1f46:	6f ef       	ldi	r22, 0xFF	; 255
    1f48:	7f ef       	ldi	r23, 0xFF	; 255
    1f4a:	c5 01       	movw	r24, r10
    1f4c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <strnlen>
    1f50:	4c 01       	movw	r8, r24
    1f52:	82 01       	movw	r16, r4
    1f54:	f3 2d       	mov	r31, r3
    1f56:	ff 77       	andi	r31, 0x7F	; 127
    1f58:	3f 2e       	mov	r3, r31
    1f5a:	16 c0       	rjmp	.+44     	; 0x1f88 <vfprintf+0x188>
    1f5c:	28 01       	movw	r4, r16
    1f5e:	22 e0       	ldi	r18, 0x02	; 2
    1f60:	42 0e       	add	r4, r18
    1f62:	51 1c       	adc	r5, r1
    1f64:	f8 01       	movw	r30, r16
    1f66:	a0 80       	ld	r10, Z
    1f68:	b1 80       	ldd	r11, Z+1	; 0x01
    1f6a:	36 fe       	sbrs	r3, 6
    1f6c:	03 c0       	rjmp	.+6      	; 0x1f74 <vfprintf+0x174>
    1f6e:	69 2d       	mov	r22, r9
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <vfprintf+0x178>
    1f74:	6f ef       	ldi	r22, 0xFF	; 255
    1f76:	7f ef       	ldi	r23, 0xFF	; 255
    1f78:	c5 01       	movw	r24, r10
    1f7a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <strnlen_P>
    1f7e:	4c 01       	movw	r8, r24
    1f80:	f3 2d       	mov	r31, r3
    1f82:	f0 68       	ori	r31, 0x80	; 128
    1f84:	3f 2e       	mov	r3, r31
    1f86:	82 01       	movw	r16, r4
    1f88:	33 fc       	sbrc	r3, 3
    1f8a:	1b c0       	rjmp	.+54     	; 0x1fc2 <vfprintf+0x1c2>
    1f8c:	82 2d       	mov	r24, r2
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	88 16       	cp	r8, r24
    1f92:	99 06       	cpc	r9, r25
    1f94:	b0 f4       	brcc	.+44     	; 0x1fc2 <vfprintf+0x1c2>
    1f96:	b6 01       	movw	r22, r12
    1f98:	80 e2       	ldi	r24, 0x20	; 32
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    1fa0:	2a 94       	dec	r2
    1fa2:	f4 cf       	rjmp	.-24     	; 0x1f8c <vfprintf+0x18c>
    1fa4:	f5 01       	movw	r30, r10
    1fa6:	37 fc       	sbrc	r3, 7
    1fa8:	85 91       	lpm	r24, Z+
    1faa:	37 fe       	sbrs	r3, 7
    1fac:	81 91       	ld	r24, Z+
    1fae:	5f 01       	movw	r10, r30
    1fb0:	b6 01       	movw	r22, r12
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    1fb8:	21 10       	cpse	r2, r1
    1fba:	2a 94       	dec	r2
    1fbc:	21 e0       	ldi	r18, 0x01	; 1
    1fbe:	82 1a       	sub	r8, r18
    1fc0:	91 08       	sbc	r9, r1
    1fc2:	81 14       	cp	r8, r1
    1fc4:	91 04       	cpc	r9, r1
    1fc6:	71 f7       	brne	.-36     	; 0x1fa4 <vfprintf+0x1a4>
    1fc8:	e8 c0       	rjmp	.+464    	; 0x219a <vfprintf+0x39a>
    1fca:	84 36       	cpi	r24, 0x64	; 100
    1fcc:	11 f0       	breq	.+4      	; 0x1fd2 <vfprintf+0x1d2>
    1fce:	89 36       	cpi	r24, 0x69	; 105
    1fd0:	41 f5       	brne	.+80     	; 0x2022 <vfprintf+0x222>
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	37 fe       	sbrs	r3, 7
    1fd6:	07 c0       	rjmp	.+14     	; 0x1fe6 <vfprintf+0x1e6>
    1fd8:	60 81       	ld	r22, Z
    1fda:	71 81       	ldd	r23, Z+1	; 0x01
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	93 81       	ldd	r25, Z+3	; 0x03
    1fe0:	0c 5f       	subi	r16, 0xFC	; 252
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	08 c0       	rjmp	.+16     	; 0x1ff6 <vfprintf+0x1f6>
    1fe6:	60 81       	ld	r22, Z
    1fe8:	71 81       	ldd	r23, Z+1	; 0x01
    1fea:	07 2e       	mov	r0, r23
    1fec:	00 0c       	add	r0, r0
    1fee:	88 0b       	sbc	r24, r24
    1ff0:	99 0b       	sbc	r25, r25
    1ff2:	0e 5f       	subi	r16, 0xFE	; 254
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	f3 2d       	mov	r31, r3
    1ff8:	ff 76       	andi	r31, 0x6F	; 111
    1ffa:	3f 2e       	mov	r3, r31
    1ffc:	97 ff       	sbrs	r25, 7
    1ffe:	09 c0       	rjmp	.+18     	; 0x2012 <vfprintf+0x212>
    2000:	90 95       	com	r25
    2002:	80 95       	com	r24
    2004:	70 95       	com	r23
    2006:	61 95       	neg	r22
    2008:	7f 4f       	sbci	r23, 0xFF	; 255
    200a:	8f 4f       	sbci	r24, 0xFF	; 255
    200c:	9f 4f       	sbci	r25, 0xFF	; 255
    200e:	f0 68       	ori	r31, 0x80	; 128
    2010:	3f 2e       	mov	r3, r31
    2012:	2a e0       	ldi	r18, 0x0A	; 10
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	a3 01       	movw	r20, r6
    2018:	0e 94 33 11 	call	0x2266	; 0x2266 <__ultoa_invert>
    201c:	88 2e       	mov	r8, r24
    201e:	86 18       	sub	r8, r6
    2020:	45 c0       	rjmp	.+138    	; 0x20ac <vfprintf+0x2ac>
    2022:	85 37       	cpi	r24, 0x75	; 117
    2024:	31 f4       	brne	.+12     	; 0x2032 <vfprintf+0x232>
    2026:	23 2d       	mov	r18, r3
    2028:	2f 7e       	andi	r18, 0xEF	; 239
    202a:	b2 2e       	mov	r11, r18
    202c:	2a e0       	ldi	r18, 0x0A	; 10
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	25 c0       	rjmp	.+74     	; 0x207c <vfprintf+0x27c>
    2032:	93 2d       	mov	r25, r3
    2034:	99 7f       	andi	r25, 0xF9	; 249
    2036:	b9 2e       	mov	r11, r25
    2038:	8f 36       	cpi	r24, 0x6F	; 111
    203a:	c1 f0       	breq	.+48     	; 0x206c <vfprintf+0x26c>
    203c:	18 f4       	brcc	.+6      	; 0x2044 <vfprintf+0x244>
    203e:	88 35       	cpi	r24, 0x58	; 88
    2040:	79 f0       	breq	.+30     	; 0x2060 <vfprintf+0x260>
    2042:	b5 c0       	rjmp	.+362    	; 0x21ae <vfprintf+0x3ae>
    2044:	80 37       	cpi	r24, 0x70	; 112
    2046:	19 f0       	breq	.+6      	; 0x204e <vfprintf+0x24e>
    2048:	88 37       	cpi	r24, 0x78	; 120
    204a:	21 f0       	breq	.+8      	; 0x2054 <vfprintf+0x254>
    204c:	b0 c0       	rjmp	.+352    	; 0x21ae <vfprintf+0x3ae>
    204e:	e9 2f       	mov	r30, r25
    2050:	e0 61       	ori	r30, 0x10	; 16
    2052:	be 2e       	mov	r11, r30
    2054:	b4 fe       	sbrs	r11, 4
    2056:	0d c0       	rjmp	.+26     	; 0x2072 <vfprintf+0x272>
    2058:	fb 2d       	mov	r31, r11
    205a:	f4 60       	ori	r31, 0x04	; 4
    205c:	bf 2e       	mov	r11, r31
    205e:	09 c0       	rjmp	.+18     	; 0x2072 <vfprintf+0x272>
    2060:	34 fe       	sbrs	r3, 4
    2062:	0a c0       	rjmp	.+20     	; 0x2078 <vfprintf+0x278>
    2064:	29 2f       	mov	r18, r25
    2066:	26 60       	ori	r18, 0x06	; 6
    2068:	b2 2e       	mov	r11, r18
    206a:	06 c0       	rjmp	.+12     	; 0x2078 <vfprintf+0x278>
    206c:	28 e0       	ldi	r18, 0x08	; 8
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	05 c0       	rjmp	.+10     	; 0x207c <vfprintf+0x27c>
    2072:	20 e1       	ldi	r18, 0x10	; 16
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	02 c0       	rjmp	.+4      	; 0x207c <vfprintf+0x27c>
    2078:	20 e1       	ldi	r18, 0x10	; 16
    207a:	32 e0       	ldi	r19, 0x02	; 2
    207c:	f8 01       	movw	r30, r16
    207e:	b7 fe       	sbrs	r11, 7
    2080:	07 c0       	rjmp	.+14     	; 0x2090 <vfprintf+0x290>
    2082:	60 81       	ld	r22, Z
    2084:	71 81       	ldd	r23, Z+1	; 0x01
    2086:	82 81       	ldd	r24, Z+2	; 0x02
    2088:	93 81       	ldd	r25, Z+3	; 0x03
    208a:	0c 5f       	subi	r16, 0xFC	; 252
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	06 c0       	rjmp	.+12     	; 0x209c <vfprintf+0x29c>
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 5f       	subi	r16, 0xFE	; 254
    209a:	1f 4f       	sbci	r17, 0xFF	; 255
    209c:	a3 01       	movw	r20, r6
    209e:	0e 94 33 11 	call	0x2266	; 0x2266 <__ultoa_invert>
    20a2:	88 2e       	mov	r8, r24
    20a4:	86 18       	sub	r8, r6
    20a6:	fb 2d       	mov	r31, r11
    20a8:	ff 77       	andi	r31, 0x7F	; 127
    20aa:	3f 2e       	mov	r3, r31
    20ac:	36 fe       	sbrs	r3, 6
    20ae:	0d c0       	rjmp	.+26     	; 0x20ca <vfprintf+0x2ca>
    20b0:	23 2d       	mov	r18, r3
    20b2:	2e 7f       	andi	r18, 0xFE	; 254
    20b4:	a2 2e       	mov	r10, r18
    20b6:	89 14       	cp	r8, r9
    20b8:	58 f4       	brcc	.+22     	; 0x20d0 <vfprintf+0x2d0>
    20ba:	34 fe       	sbrs	r3, 4
    20bc:	0b c0       	rjmp	.+22     	; 0x20d4 <vfprintf+0x2d4>
    20be:	32 fc       	sbrc	r3, 2
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <vfprintf+0x2d4>
    20c2:	83 2d       	mov	r24, r3
    20c4:	8e 7e       	andi	r24, 0xEE	; 238
    20c6:	a8 2e       	mov	r10, r24
    20c8:	05 c0       	rjmp	.+10     	; 0x20d4 <vfprintf+0x2d4>
    20ca:	b8 2c       	mov	r11, r8
    20cc:	a3 2c       	mov	r10, r3
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <vfprintf+0x2d6>
    20d0:	b8 2c       	mov	r11, r8
    20d2:	01 c0       	rjmp	.+2      	; 0x20d6 <vfprintf+0x2d6>
    20d4:	b9 2c       	mov	r11, r9
    20d6:	a4 fe       	sbrs	r10, 4
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <vfprintf+0x2f8>
    20da:	fe 01       	movw	r30, r28
    20dc:	e8 0d       	add	r30, r8
    20de:	f1 1d       	adc	r31, r1
    20e0:	80 81       	ld	r24, Z
    20e2:	80 33       	cpi	r24, 0x30	; 48
    20e4:	21 f4       	brne	.+8      	; 0x20ee <vfprintf+0x2ee>
    20e6:	9a 2d       	mov	r25, r10
    20e8:	99 7e       	andi	r25, 0xE9	; 233
    20ea:	a9 2e       	mov	r10, r25
    20ec:	09 c0       	rjmp	.+18     	; 0x2100 <vfprintf+0x300>
    20ee:	a2 fe       	sbrs	r10, 2
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <vfprintf+0x2fe>
    20f2:	b3 94       	inc	r11
    20f4:	b3 94       	inc	r11
    20f6:	04 c0       	rjmp	.+8      	; 0x2100 <vfprintf+0x300>
    20f8:	8a 2d       	mov	r24, r10
    20fa:	86 78       	andi	r24, 0x86	; 134
    20fc:	09 f0       	breq	.+2      	; 0x2100 <vfprintf+0x300>
    20fe:	b3 94       	inc	r11
    2100:	a3 fc       	sbrc	r10, 3
    2102:	11 c0       	rjmp	.+34     	; 0x2126 <vfprintf+0x326>
    2104:	a0 fe       	sbrs	r10, 0
    2106:	06 c0       	rjmp	.+12     	; 0x2114 <vfprintf+0x314>
    2108:	b2 14       	cp	r11, r2
    210a:	88 f4       	brcc	.+34     	; 0x212e <vfprintf+0x32e>
    210c:	28 0c       	add	r2, r8
    210e:	92 2c       	mov	r9, r2
    2110:	9b 18       	sub	r9, r11
    2112:	0e c0       	rjmp	.+28     	; 0x2130 <vfprintf+0x330>
    2114:	b2 14       	cp	r11, r2
    2116:	60 f4       	brcc	.+24     	; 0x2130 <vfprintf+0x330>
    2118:	b6 01       	movw	r22, r12
    211a:	80 e2       	ldi	r24, 0x20	; 32
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2122:	b3 94       	inc	r11
    2124:	f7 cf       	rjmp	.-18     	; 0x2114 <vfprintf+0x314>
    2126:	b2 14       	cp	r11, r2
    2128:	18 f4       	brcc	.+6      	; 0x2130 <vfprintf+0x330>
    212a:	2b 18       	sub	r2, r11
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <vfprintf+0x332>
    212e:	98 2c       	mov	r9, r8
    2130:	21 2c       	mov	r2, r1
    2132:	a4 fe       	sbrs	r10, 4
    2134:	10 c0       	rjmp	.+32     	; 0x2156 <vfprintf+0x356>
    2136:	b6 01       	movw	r22, r12
    2138:	80 e3       	ldi	r24, 0x30	; 48
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2140:	a2 fe       	sbrs	r10, 2
    2142:	17 c0       	rjmp	.+46     	; 0x2172 <vfprintf+0x372>
    2144:	a1 fc       	sbrc	r10, 1
    2146:	03 c0       	rjmp	.+6      	; 0x214e <vfprintf+0x34e>
    2148:	88 e7       	ldi	r24, 0x78	; 120
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <vfprintf+0x352>
    214e:	88 e5       	ldi	r24, 0x58	; 88
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	b6 01       	movw	r22, r12
    2154:	0c c0       	rjmp	.+24     	; 0x216e <vfprintf+0x36e>
    2156:	8a 2d       	mov	r24, r10
    2158:	86 78       	andi	r24, 0x86	; 134
    215a:	59 f0       	breq	.+22     	; 0x2172 <vfprintf+0x372>
    215c:	a1 fe       	sbrs	r10, 1
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <vfprintf+0x364>
    2160:	8b e2       	ldi	r24, 0x2B	; 43
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <vfprintf+0x366>
    2164:	80 e2       	ldi	r24, 0x20	; 32
    2166:	a7 fc       	sbrc	r10, 7
    2168:	8d e2       	ldi	r24, 0x2D	; 45
    216a:	b6 01       	movw	r22, r12
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2172:	89 14       	cp	r8, r9
    2174:	38 f4       	brcc	.+14     	; 0x2184 <vfprintf+0x384>
    2176:	b6 01       	movw	r22, r12
    2178:	80 e3       	ldi	r24, 0x30	; 48
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2180:	9a 94       	dec	r9
    2182:	f7 cf       	rjmp	.-18     	; 0x2172 <vfprintf+0x372>
    2184:	8a 94       	dec	r8
    2186:	f3 01       	movw	r30, r6
    2188:	e8 0d       	add	r30, r8
    218a:	f1 1d       	adc	r31, r1
    218c:	80 81       	ld	r24, Z
    218e:	b6 01       	movw	r22, r12
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    2196:	81 10       	cpse	r8, r1
    2198:	f5 cf       	rjmp	.-22     	; 0x2184 <vfprintf+0x384>
    219a:	22 20       	and	r2, r2
    219c:	09 f4       	brne	.+2      	; 0x21a0 <vfprintf+0x3a0>
    219e:	42 ce       	rjmp	.-892    	; 0x1e24 <vfprintf+0x24>
    21a0:	b6 01       	movw	r22, r12
    21a2:	80 e2       	ldi	r24, 0x20	; 32
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	0e 94 f7 10 	call	0x21ee	; 0x21ee <fputc>
    21aa:	2a 94       	dec	r2
    21ac:	f6 cf       	rjmp	.-20     	; 0x219a <vfprintf+0x39a>
    21ae:	f6 01       	movw	r30, r12
    21b0:	86 81       	ldd	r24, Z+6	; 0x06
    21b2:	97 81       	ldd	r25, Z+7	; 0x07
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <vfprintf+0x3ba>
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	9f ef       	ldi	r25, 0xFF	; 255
    21ba:	2b 96       	adiw	r28, 0x0b	; 11
    21bc:	e2 e1       	ldi	r30, 0x12	; 18
    21be:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__>

000021c2 <strnlen_P>:
    21c2:	fc 01       	movw	r30, r24
    21c4:	05 90       	lpm	r0, Z+
    21c6:	61 50       	subi	r22, 0x01	; 1
    21c8:	70 40       	sbci	r23, 0x00	; 0
    21ca:	01 10       	cpse	r0, r1
    21cc:	d8 f7       	brcc	.-10     	; 0x21c4 <strnlen_P+0x2>
    21ce:	80 95       	com	r24
    21d0:	90 95       	com	r25
    21d2:	8e 0f       	add	r24, r30
    21d4:	9f 1f       	adc	r25, r31
    21d6:	08 95       	ret

000021d8 <strnlen>:
    21d8:	fc 01       	movw	r30, r24
    21da:	61 50       	subi	r22, 0x01	; 1
    21dc:	70 40       	sbci	r23, 0x00	; 0
    21de:	01 90       	ld	r0, Z+
    21e0:	01 10       	cpse	r0, r1
    21e2:	d8 f7       	brcc	.-10     	; 0x21da <strnlen+0x2>
    21e4:	80 95       	com	r24
    21e6:	90 95       	com	r25
    21e8:	8e 0f       	add	r24, r30
    21ea:	9f 1f       	adc	r25, r31
    21ec:	08 95       	ret

000021ee <fputc>:
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	fb 01       	movw	r30, r22
    21f8:	23 81       	ldd	r18, Z+3	; 0x03
    21fa:	21 fd       	sbrc	r18, 1
    21fc:	03 c0       	rjmp	.+6      	; 0x2204 <fputc+0x16>
    21fe:	8f ef       	ldi	r24, 0xFF	; 255
    2200:	9f ef       	ldi	r25, 0xFF	; 255
    2202:	2c c0       	rjmp	.+88     	; 0x225c <fputc+0x6e>
    2204:	22 ff       	sbrs	r18, 2
    2206:	16 c0       	rjmp	.+44     	; 0x2234 <fputc+0x46>
    2208:	46 81       	ldd	r20, Z+6	; 0x06
    220a:	57 81       	ldd	r21, Z+7	; 0x07
    220c:	24 81       	ldd	r18, Z+4	; 0x04
    220e:	35 81       	ldd	r19, Z+5	; 0x05
    2210:	42 17       	cp	r20, r18
    2212:	53 07       	cpc	r21, r19
    2214:	44 f4       	brge	.+16     	; 0x2226 <fputc+0x38>
    2216:	a0 81       	ld	r26, Z
    2218:	b1 81       	ldd	r27, Z+1	; 0x01
    221a:	9d 01       	movw	r18, r26
    221c:	2f 5f       	subi	r18, 0xFF	; 255
    221e:	3f 4f       	sbci	r19, 0xFF	; 255
    2220:	31 83       	std	Z+1, r19	; 0x01
    2222:	20 83       	st	Z, r18
    2224:	8c 93       	st	X, r24
    2226:	26 81       	ldd	r18, Z+6	; 0x06
    2228:	37 81       	ldd	r19, Z+7	; 0x07
    222a:	2f 5f       	subi	r18, 0xFF	; 255
    222c:	3f 4f       	sbci	r19, 0xFF	; 255
    222e:	37 83       	std	Z+7, r19	; 0x07
    2230:	26 83       	std	Z+6, r18	; 0x06
    2232:	14 c0       	rjmp	.+40     	; 0x225c <fputc+0x6e>
    2234:	8b 01       	movw	r16, r22
    2236:	ec 01       	movw	r28, r24
    2238:	fb 01       	movw	r30, r22
    223a:	00 84       	ldd	r0, Z+8	; 0x08
    223c:	f1 85       	ldd	r31, Z+9	; 0x09
    223e:	e0 2d       	mov	r30, r0
    2240:	09 95       	icall
    2242:	89 2b       	or	r24, r25
    2244:	e1 f6       	brne	.-72     	; 0x21fe <fputc+0x10>
    2246:	d8 01       	movw	r26, r16
    2248:	16 96       	adiw	r26, 0x06	; 6
    224a:	8d 91       	ld	r24, X+
    224c:	9c 91       	ld	r25, X
    224e:	17 97       	sbiw	r26, 0x07	; 7
    2250:	01 96       	adiw	r24, 0x01	; 1
    2252:	17 96       	adiw	r26, 0x07	; 7
    2254:	9c 93       	st	X, r25
    2256:	8e 93       	st	-X, r24
    2258:	16 97       	sbiw	r26, 0x06	; 6
    225a:	ce 01       	movw	r24, r28
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	08 95       	ret

00002266 <__ultoa_invert>:
    2266:	fa 01       	movw	r30, r20
    2268:	aa 27       	eor	r26, r26
    226a:	28 30       	cpi	r18, 0x08	; 8
    226c:	51 f1       	breq	.+84     	; 0x22c2 <__ultoa_invert+0x5c>
    226e:	20 31       	cpi	r18, 0x10	; 16
    2270:	81 f1       	breq	.+96     	; 0x22d2 <__ultoa_invert+0x6c>
    2272:	e8 94       	clt
    2274:	6f 93       	push	r22
    2276:	6e 7f       	andi	r22, 0xFE	; 254
    2278:	6e 5f       	subi	r22, 0xFE	; 254
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	8f 4f       	sbci	r24, 0xFF	; 255
    227e:	9f 4f       	sbci	r25, 0xFF	; 255
    2280:	af 4f       	sbci	r26, 0xFF	; 255
    2282:	b1 e0       	ldi	r27, 0x01	; 1
    2284:	3e d0       	rcall	.+124    	; 0x2302 <__ultoa_invert+0x9c>
    2286:	b4 e0       	ldi	r27, 0x04	; 4
    2288:	3c d0       	rcall	.+120    	; 0x2302 <__ultoa_invert+0x9c>
    228a:	67 0f       	add	r22, r23
    228c:	78 1f       	adc	r23, r24
    228e:	89 1f       	adc	r24, r25
    2290:	9a 1f       	adc	r25, r26
    2292:	a1 1d       	adc	r26, r1
    2294:	68 0f       	add	r22, r24
    2296:	79 1f       	adc	r23, r25
    2298:	8a 1f       	adc	r24, r26
    229a:	91 1d       	adc	r25, r1
    229c:	a1 1d       	adc	r26, r1
    229e:	6a 0f       	add	r22, r26
    22a0:	71 1d       	adc	r23, r1
    22a2:	81 1d       	adc	r24, r1
    22a4:	91 1d       	adc	r25, r1
    22a6:	a1 1d       	adc	r26, r1
    22a8:	20 d0       	rcall	.+64     	; 0x22ea <__ultoa_invert+0x84>
    22aa:	09 f4       	brne	.+2      	; 0x22ae <__ultoa_invert+0x48>
    22ac:	68 94       	set
    22ae:	3f 91       	pop	r19
    22b0:	2a e0       	ldi	r18, 0x0A	; 10
    22b2:	26 9f       	mul	r18, r22
    22b4:	11 24       	eor	r1, r1
    22b6:	30 19       	sub	r19, r0
    22b8:	30 5d       	subi	r19, 0xD0	; 208
    22ba:	31 93       	st	Z+, r19
    22bc:	de f6       	brtc	.-74     	; 0x2274 <__ultoa_invert+0xe>
    22be:	cf 01       	movw	r24, r30
    22c0:	08 95       	ret
    22c2:	46 2f       	mov	r20, r22
    22c4:	47 70       	andi	r20, 0x07	; 7
    22c6:	40 5d       	subi	r20, 0xD0	; 208
    22c8:	41 93       	st	Z+, r20
    22ca:	b3 e0       	ldi	r27, 0x03	; 3
    22cc:	0f d0       	rcall	.+30     	; 0x22ec <__ultoa_invert+0x86>
    22ce:	c9 f7       	brne	.-14     	; 0x22c2 <__ultoa_invert+0x5c>
    22d0:	f6 cf       	rjmp	.-20     	; 0x22be <__ultoa_invert+0x58>
    22d2:	46 2f       	mov	r20, r22
    22d4:	4f 70       	andi	r20, 0x0F	; 15
    22d6:	40 5d       	subi	r20, 0xD0	; 208
    22d8:	4a 33       	cpi	r20, 0x3A	; 58
    22da:	18 f0       	brcs	.+6      	; 0x22e2 <__ultoa_invert+0x7c>
    22dc:	49 5d       	subi	r20, 0xD9	; 217
    22de:	31 fd       	sbrc	r19, 1
    22e0:	40 52       	subi	r20, 0x20	; 32
    22e2:	41 93       	st	Z+, r20
    22e4:	02 d0       	rcall	.+4      	; 0x22ea <__ultoa_invert+0x84>
    22e6:	a9 f7       	brne	.-22     	; 0x22d2 <__ultoa_invert+0x6c>
    22e8:	ea cf       	rjmp	.-44     	; 0x22be <__ultoa_invert+0x58>
    22ea:	b4 e0       	ldi	r27, 0x04	; 4
    22ec:	a6 95       	lsr	r26
    22ee:	97 95       	ror	r25
    22f0:	87 95       	ror	r24
    22f2:	77 95       	ror	r23
    22f4:	67 95       	ror	r22
    22f6:	ba 95       	dec	r27
    22f8:	c9 f7       	brne	.-14     	; 0x22ec <__ultoa_invert+0x86>
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	61 05       	cpc	r22, r1
    22fe:	71 05       	cpc	r23, r1
    2300:	08 95       	ret
    2302:	9b 01       	movw	r18, r22
    2304:	ac 01       	movw	r20, r24
    2306:	0a 2e       	mov	r0, r26
    2308:	06 94       	lsr	r0
    230a:	57 95       	ror	r21
    230c:	47 95       	ror	r20
    230e:	37 95       	ror	r19
    2310:	27 95       	ror	r18
    2312:	ba 95       	dec	r27
    2314:	c9 f7       	brne	.-14     	; 0x2308 <__ultoa_invert+0xa2>
    2316:	62 0f       	add	r22, r18
    2318:	73 1f       	adc	r23, r19
    231a:	84 1f       	adc	r24, r20
    231c:	95 1f       	adc	r25, r21
    231e:	a0 1d       	adc	r26, r0
    2320:	08 95       	ret

00002322 <__prologue_saves__>:
    2322:	2f 92       	push	r2
    2324:	3f 92       	push	r3
    2326:	4f 92       	push	r4
    2328:	5f 92       	push	r5
    232a:	6f 92       	push	r6
    232c:	7f 92       	push	r7
    232e:	8f 92       	push	r8
    2330:	9f 92       	push	r9
    2332:	af 92       	push	r10
    2334:	bf 92       	push	r11
    2336:	cf 92       	push	r12
    2338:	df 92       	push	r13
    233a:	ef 92       	push	r14
    233c:	ff 92       	push	r15
    233e:	0f 93       	push	r16
    2340:	1f 93       	push	r17
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	ca 1b       	sub	r28, r26
    234c:	db 0b       	sbc	r29, r27
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	09 94       	ijmp

0000235a <__epilogue_restores__>:
    235a:	2a 88       	ldd	r2, Y+18	; 0x12
    235c:	39 88       	ldd	r3, Y+17	; 0x11
    235e:	48 88       	ldd	r4, Y+16	; 0x10
    2360:	5f 84       	ldd	r5, Y+15	; 0x0f
    2362:	6e 84       	ldd	r6, Y+14	; 0x0e
    2364:	7d 84       	ldd	r7, Y+13	; 0x0d
    2366:	8c 84       	ldd	r8, Y+12	; 0x0c
    2368:	9b 84       	ldd	r9, Y+11	; 0x0b
    236a:	aa 84       	ldd	r10, Y+10	; 0x0a
    236c:	b9 84       	ldd	r11, Y+9	; 0x09
    236e:	c8 84       	ldd	r12, Y+8	; 0x08
    2370:	df 80       	ldd	r13, Y+7	; 0x07
    2372:	ee 80       	ldd	r14, Y+6	; 0x06
    2374:	fd 80       	ldd	r15, Y+5	; 0x05
    2376:	0c 81       	ldd	r16, Y+4	; 0x04
    2378:	1b 81       	ldd	r17, Y+3	; 0x03
    237a:	aa 81       	ldd	r26, Y+2	; 0x02
    237c:	b9 81       	ldd	r27, Y+1	; 0x01
    237e:	ce 0f       	add	r28, r30
    2380:	d1 1d       	adc	r29, r1
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	ed 01       	movw	r28, r26
    238e:	08 95       	ret

00002390 <_exit>:
    2390:	f8 94       	cli

00002392 <__stop_program>:
    2392:	ff cf       	rjmp	.-2      	; 0x2392 <__stop_program>
